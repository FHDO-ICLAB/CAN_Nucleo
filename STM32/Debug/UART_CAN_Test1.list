
UART_CAN_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003688  08003688  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003690  08003690  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003690  08003690  00013690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08003710  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003710  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001157b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240e  00000000  00000000  0003161b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000b228  00000000  00000000  00033a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0003ec58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b48  00000000  00000000  0003f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f5d  00000000  00000000  00040308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cf7  00000000  00000000  00067265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed922  00000000  00000000  00078f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016687e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d88  00000000  00000000  001668d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003624 	.word	0x08003624

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003624 	.word	0x08003624

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_GPIO_Init+0x1c>)
 80004d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d2:	f042 0201 	orr.w	r2, r2, #1
 80004d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	9b01      	ldr	r3, [sp, #4]

}
 80004e2:	b002      	add	sp, #8
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	4606      	mov	r6, r0
	uint8_t *CAN_RxData=malloc((UART_RxData[1])*sizeof(uint8_t));
 80004f0:	4d0e      	ldr	r5, [pc, #56]	; (800052c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80004f2:	7868      	ldrb	r0, [r5, #1]
 80004f4:	f002 ffd4 	bl	80034a0 <malloc>
 80004f8:	4604      	mov	r4, r0
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CAN_RxData);
 80004fa:	4603      	mov	r3, r0
 80004fc:	f105 0210 	add.w	r2, r5, #16
 8000500:	2100      	movs	r1, #0
 8000502:	4630      	mov	r0, r6
 8000504:	f000 fd24 	bl	8000f50 <HAL_CAN_GetRxMessage>
	CAN_RxData[3]=0xa1;
 8000508:	23a1      	movs	r3, #161	; 0xa1
 800050a:	70e3      	strb	r3, [r4, #3]
	HAL_UART_Transmit(&huart2,CAN_RxData,8,1000);//sizeof(CAN_RxData)
 800050c:	f105 062c 	add.w	r6, r5, #44	; 0x2c
 8000510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000514:	2208      	movs	r2, #8
 8000516:	4621      	mov	r1, r4
 8000518:	4630      	mov	r0, r6
 800051a:	f002 fdfc 	bl	8003116 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, UART_RxData, sizeof(UART_RxData)); //restarting the interrupt reception mode
 800051e:	220e      	movs	r2, #14
 8000520:	4629      	mov	r1, r5
 8000522:	4630      	mov	r0, r6
 8000524:	f002 ff38 	bl	8003398 <HAL_UART_Receive_IT>
}
 8000528:	bd70      	pop	{r4, r5, r6, pc}
 800052a:	bf00      	nop
 800052c:	2000008c 	.word	0x2000008c

08000530 <CAN_Mode>:
	switch(ModeID)
 8000530:	2803      	cmp	r0, #3
 8000532:	d819      	bhi.n	8000568 <CAN_Mode+0x38>
 8000534:	e8df f000 	tbb	[pc, r0]
 8000538:	130d0702 	.word	0x130d0702
		hcan1.Init.Mode =CAN_MODE_NORMAL;
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <CAN_Mode+0x3c>)
 800053e:	2200      	movs	r2, #0
 8000540:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		break;
 8000544:	4770      	bx	lr
		hcan1.Init.Mode =CAN_MODE_LOOPBACK;
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <CAN_Mode+0x3c>)
 8000548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800054c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		break;
 8000550:	4770      	bx	lr
		hcan1.Init.Mode =CAN_MODE_SILENT;
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <CAN_Mode+0x3c>)
 8000554:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000558:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		break;
 800055c:	4770      	bx	lr
		hcan1.Init.Mode =CAN_MODE_SILENT_LOOPBACK;
 800055e:	4b03      	ldr	r3, [pc, #12]	; (800056c <CAN_Mode+0x3c>)
 8000560:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000564:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	2000008c 	.word	0x2000008c

08000570 <CAN_TSeg1>:
	switch(TSeg1ID)
 8000570:	3801      	subs	r0, #1
 8000572:	280f      	cmp	r0, #15
 8000574:	d867      	bhi.n	8000646 <CAN_TSeg1+0xd6>
 8000576:	e8df f000 	tbb	[pc, r0]
 800057a:	0d08      	.short	0x0d08
 800057c:	251f1913 	.word	0x251f1913
 8000580:	3d37312b 	.word	0x3d37312b
 8000584:	554f4943 	.word	0x554f4943
 8000588:	615b      	.short	0x615b
		hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800058a:	4b2f      	ldr	r3, [pc, #188]	; (8000648 <CAN_TSeg1+0xd8>)
 800058c:	2200      	movs	r2, #0
 800058e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 8000592:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000594:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <CAN_TSeg1+0xd8>)
 8000596:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800059a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 800059e:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <CAN_TSeg1+0xd8>)
 80005a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 80005aa:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <CAN_TSeg1+0xd8>)
 80005ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 80005b6:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <CAN_TSeg1+0xd8>)
 80005ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 80005c2:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <CAN_TSeg1+0xd8>)
 80005c6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80005ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 80005ce:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <CAN_TSeg1+0xd8>)
 80005d2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80005d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 80005da:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <CAN_TSeg1+0xd8>)
 80005de:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80005e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 80005e6:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <CAN_TSeg1+0xd8>)
 80005ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80005ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 80005f2:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <CAN_TSeg1+0xd8>)
 80005f6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80005fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 80005fe:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <CAN_TSeg1+0xd8>)
 8000602:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000606:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 800060a:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <CAN_TSeg1+0xd8>)
 800060e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000612:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 8000616:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <CAN_TSeg1+0xd8>)
 800061a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800061e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 8000622:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <CAN_TSeg1+0xd8>)
 8000626:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800062a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 800062e:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <CAN_TSeg1+0xd8>)
 8000632:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000636:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		break;
 800063a:	4770      	bx	lr
		hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <CAN_TSeg1+0xd8>)
 800063e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000642:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8000646:	4770      	bx	lr
 8000648:	2000008c 	.word	0x2000008c

0800064c <CAN_TSeg2>:
	switch(TSeg2ID)
 800064c:	3801      	subs	r0, #1
 800064e:	2807      	cmp	r0, #7
 8000650:	d833      	bhi.n	80006ba <CAN_TSeg2+0x6e>
 8000652:	e8df f000 	tbb	[pc, r0]
 8000656:	0904      	.short	0x0904
 8000658:	211b150f 	.word	0x211b150f
 800065c:	2d27      	.short	0x2d27
		hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <CAN_TSeg2+0x70>)
 8000660:	2200      	movs	r2, #0
 8000662:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		break;
 8000666:	4770      	bx	lr
		hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <CAN_TSeg2+0x70>)
 800066a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800066e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		break;
 8000672:	4770      	bx	lr
		hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <CAN_TSeg2+0x70>)
 8000676:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800067a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		break;
 800067e:	4770      	bx	lr
		hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <CAN_TSeg2+0x70>)
 8000682:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000686:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		break;
 800068a:	4770      	bx	lr
		hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <CAN_TSeg2+0x70>)
 800068e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000692:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		break;
 8000696:	4770      	bx	lr
		hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <CAN_TSeg2+0x70>)
 800069a:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800069e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		break;
 80006a2:	4770      	bx	lr
		hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <CAN_TSeg2+0x70>)
 80006a6:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80006aa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		break;
 80006ae:	4770      	bx	lr
		hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 80006b0:	4b02      	ldr	r3, [pc, #8]	; (80006bc <CAN_TSeg2+0x70>)
 80006b2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80006b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 80006ba:	4770      	bx	lr
 80006bc:	2000008c 	.word	0x2000008c

080006c0 <CAN_SJW>:
	switch(SJW)
 80006c0:	3801      	subs	r0, #1
 80006c2:	2803      	cmp	r0, #3
 80006c4:	d819      	bhi.n	80006fa <CAN_SJW+0x3a>
 80006c6:	e8df f000 	tbb	[pc, r0]
 80006ca:	0702      	.short	0x0702
 80006cc:	130d      	.short	0x130d
		hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <CAN_SJW+0x3c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		break;
 80006d6:	4770      	bx	lr
		hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <CAN_SJW+0x3c>)
 80006da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		break;
 80006e2:	4770      	bx	lr
		hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <CAN_SJW+0x3c>)
 80006e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006ea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		break;
 80006ee:	4770      	bx	lr
		hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80006f0:	4b02      	ldr	r3, [pc, #8]	; (80006fc <CAN_SJW+0x3c>)
 80006f2:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80006f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 80006fa:	4770      	bx	lr
 80006fc:	2000008c 	.word	0x2000008c

08000700 <HAL_UART_RxCpltCallback>:
{
 8000700:	b510      	push	{r4, lr}
	if (UART_RxData[0]==2){
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <HAL_UART_RxCpltCallback+0xbc>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d002      	beq.n	8000710 <HAL_UART_RxCpltCallback+0x10>
	} else if (UART_RxData[0]==1){
 800070a:	2b01      	cmp	r3, #1
 800070c:	d03f      	beq.n	800078e <HAL_UART_RxCpltCallback+0x8e>
}
 800070e:	bd10      	pop	{r4, pc}
		TxHeader.DLC=UART_RxData[2];
 8000710:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <HAL_UART_RxCpltCallback+0xbc>)
 8000712:	7898      	ldrb	r0, [r3, #2]
 8000714:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
		TxHeader.IDE=(UART_RxData[13]==1)?CAN_ID_STD:CAN_ID_EXT;
 8000718:	7b5b      	ldrb	r3, [r3, #13]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d01c      	beq.n	8000758 <HAL_UART_RxCpltCallback+0x58>
 800071e:	2304      	movs	r3, #4
 8000720:	4a26      	ldr	r2, [pc, #152]	; (80007bc <HAL_UART_RxCpltCallback+0xbc>)
 8000722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		if (TxHeader.IDE==CAN_ID_STD)
 8000726:	b9cb      	cbnz	r3, 800075c <HAL_UART_RxCpltCallback+0x5c>
			TxHeader.StdId=UART_RxData[1];
 8000728:	4613      	mov	r3, r2
 800072a:	7852      	ldrb	r2, [r2, #1]
 800072c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		TxHeader.RTR=(UART_RxData[11]==1)?CAN_RTR_DATA:CAN_RTR_REMOTE;
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <HAL_UART_RxCpltCallback+0xbc>)
 8000732:	7adb      	ldrb	r3, [r3, #11]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d016      	beq.n	8000766 <HAL_UART_RxCpltCallback+0x66>
 8000738:	2202      	movs	r2, #2
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <HAL_UART_RxCpltCallback+0xbc>)
 800073c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		TxHeader.TransmitGlobalTime=(UART_RxData[12]==1)?ENABLE:DISABLE;
 8000740:	7b1a      	ldrb	r2, [r3, #12]
 8000742:	2a01      	cmp	r2, #1
 8000744:	bf14      	ite	ne
 8000746:	2200      	movne	r2, #0
 8000748:	2201      	moveq	r2, #1
 800074a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		uint8_t *Data=malloc(UART_RxData[2]*sizeof(uint8_t));
 800074e:	f002 fea7 	bl	80034a0 <malloc>
 8000752:	4602      	mov	r2, r0
		for (int i=0;i<UART_RxData[2];i++)
 8000754:	2300      	movs	r3, #0
 8000756:	e00d      	b.n	8000774 <HAL_UART_RxCpltCallback+0x74>
		TxHeader.IDE=(UART_RxData[13]==1)?CAN_ID_STD:CAN_ID_EXT;
 8000758:	2300      	movs	r3, #0
 800075a:	e7e1      	b.n	8000720 <HAL_UART_RxCpltCallback+0x20>
			TxHeader.ExtId=UART_RxData[1];
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <HAL_UART_RxCpltCallback+0xbc>)
 800075e:	785a      	ldrb	r2, [r3, #1]
 8000760:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8000764:	e7e4      	b.n	8000730 <HAL_UART_RxCpltCallback+0x30>
		TxHeader.RTR=(UART_RxData[11]==1)?CAN_RTR_DATA:CAN_RTR_REMOTE;
 8000766:	2200      	movs	r2, #0
 8000768:	e7e7      	b.n	800073a <HAL_UART_RxCpltCallback+0x3a>
			Data[i]=UART_RxData[i+3];
 800076a:	1cd9      	adds	r1, r3, #3
 800076c:	4c13      	ldr	r4, [pc, #76]	; (80007bc <HAL_UART_RxCpltCallback+0xbc>)
 800076e:	5c61      	ldrb	r1, [r4, r1]
 8000770:	54d1      	strb	r1, [r2, r3]
		for (int i=0;i<UART_RxData[2];i++)
 8000772:	3301      	adds	r3, #1
 8000774:	4911      	ldr	r1, [pc, #68]	; (80007bc <HAL_UART_RxCpltCallback+0xbc>)
 8000776:	7889      	ldrb	r1, [r1, #2]
 8000778:	4299      	cmp	r1, r3
 800077a:	dcf6      	bgt.n	800076a <HAL_UART_RxCpltCallback+0x6a>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 800077c:	480f      	ldr	r0, [pc, #60]	; (80007bc <HAL_UART_RxCpltCallback+0xbc>)
 800077e:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
 8000782:	f100 01d8 	add.w	r1, r0, #216	; 0xd8
 8000786:	30b0      	adds	r0, #176	; 0xb0
 8000788:	f000 fb6d 	bl	8000e66 <HAL_CAN_AddTxMessage>
 800078c:	e7bf      	b.n	800070e <HAL_UART_RxCpltCallback+0xe>
		hcan1.Init.Prescaler = UART_RxData[1];
 800078e:	4c0b      	ldr	r4, [pc, #44]	; (80007bc <HAL_UART_RxCpltCallback+0xbc>)
 8000790:	7863      	ldrb	r3, [r4, #1]
 8000792:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		CAN_Mode(UART_RxData[2]);
 8000796:	78a0      	ldrb	r0, [r4, #2]
 8000798:	f7ff feca 	bl	8000530 <CAN_Mode>
		CAN_SJW(UART_RxData[3]);
 800079c:	78e0      	ldrb	r0, [r4, #3]
 800079e:	f7ff ff8f 	bl	80006c0 <CAN_SJW>
		CAN_TSeg1(UART_RxData[4]);
 80007a2:	7920      	ldrb	r0, [r4, #4]
 80007a4:	f7ff fee4 	bl	8000570 <CAN_TSeg1>
		CAN_TSeg2(UART_RxData[5]);
 80007a8:	7960      	ldrb	r0, [r4, #5]
 80007aa:	f7ff ff4f 	bl	800064c <CAN_TSeg2>
		HAL_UART_Receive_IT(&huart2, UART_RxData, sizeof(UART_RxData));
 80007ae:	220e      	movs	r2, #14
 80007b0:	4621      	mov	r1, r4
 80007b2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80007b6:	f002 fdef 	bl	8003398 <HAL_UART_Receive_IT>
}
 80007ba:	e7a8      	b.n	800070e <HAL_UART_RxCpltCallback+0xe>
 80007bc:	2000008c 	.word	0x2000008c

080007c0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <Error_Handler+0x2>

080007c4 <MX_CAN1_Init>:
{
 80007c4:	b508      	push	{r3, lr}
  hcan1.Instance = CAN1;
 80007c6:	4815      	ldr	r0, [pc, #84]	; (800081c <MX_CAN1_Init+0x58>)
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_CAN1_Init+0x5c>)
 80007ca:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
  hcan1.Init.Prescaler = 10;
 80007ce:	230a      	movs	r3, #10
 80007d0:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
  hcan1.Init.Mode = CAN_MODE_LOOPBACK; //CAN_MODE_NORMAL CAN_MODE_LOOPBACK
 80007d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80007dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007e0:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80007e4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80007e8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80007ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007f0:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
  hcan1.Init.AutoBusOff = DISABLE;
 80007fa:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
  hcan1.Init.AutoWakeUp = DISABLE;
 80007fe:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca
  hcan1.Init.AutoRetransmission = DISABLE;
 8000802:	f880 30cb 	strb.w	r3, [r0, #203]	; 0xcb
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000806:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800080a:	f880 30cd 	strb.w	r3, [r0, #205]	; 0xcd
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800080e:	30b0      	adds	r0, #176	; 0xb0
 8000810:	f000 f9d2 	bl	8000bb8 <HAL_CAN_Init>
 8000814:	b900      	cbnz	r0, 8000818 <MX_CAN1_Init+0x54>
}
 8000816:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000818:	f7ff ffd2 	bl	80007c0 <Error_Handler>
 800081c:	2000008c 	.word	0x2000008c
 8000820:	40006400 	.word	0x40006400

08000824 <MX_USART2_UART_Init>:
{
 8000824:	b500      	push	{lr}
 8000826:	b08b      	sub	sp, #44	; 0x2c
  huart2.Instance = USART2;
 8000828:	4814      	ldr	r0, [pc, #80]	; (800087c <MX_USART2_UART_Init+0x58>)
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800082c:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart2.Init.BaudRate = 115200;
 800082e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000832:	6303      	str	r3, [r0, #48]	; 0x30
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000834:	2300      	movs	r3, #0
 8000836:	6343      	str	r3, [r0, #52]	; 0x34
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	6383      	str	r3, [r0, #56]	; 0x38
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083c:	220c      	movs	r2, #12
 800083e:	6402      	str	r2, [r0, #64]	; 0x40
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000840:	6443      	str	r3, [r0, #68]	; 0x44
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000842:	6483      	str	r3, [r0, #72]	; 0x48
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000844:	64c3      	str	r3, [r0, #76]	; 0x4c
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000846:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000848:	302c      	adds	r0, #44	; 0x2c
 800084a:	f002 fd08 	bl	800325e <HAL_UART_Init>
 800084e:	b998      	cbnz	r0, 8000878 <MX_USART2_UART_Init+0x54>
     canfilterconfig.FilterActivation=CAN_FILTER_ENABLE;//CAN_FILTER_DISABLE or CAN_FILTER_ENABLE
 8000850:	2201      	movs	r2, #1
 8000852:	9208      	str	r2, [sp, #32]
     canfilterconfig.FilterBank=10;
 8000854:	230a      	movs	r3, #10
 8000856:	9305      	str	r3, [sp, #20]
     canfilterconfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000858:	2300      	movs	r3, #0
 800085a:	9304      	str	r3, [sp, #16]
     canfilterconfig.FilterIdHigh=0;//0x100<<5
 800085c:	9300      	str	r3, [sp, #0]
     canfilterconfig.FilterIdLow=0x0000;
 800085e:	9301      	str	r3, [sp, #4]
     canfilterconfig.FilterMaskIdHigh=0;//0x100<<5
 8000860:	9302      	str	r3, [sp, #8]
     canfilterconfig.FilterMaskIdLow=0x0000;
 8000862:	9303      	str	r3, [sp, #12]
     canfilterconfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8000864:	9306      	str	r3, [sp, #24]
     canfilterconfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000866:	9207      	str	r2, [sp, #28]
     canfilterconfig.SlaveStartFilterBank=0;
 8000868:	9309      	str	r3, [sp, #36]	; 0x24
     HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800086a:	4669      	mov	r1, sp
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART2_UART_Init+0x60>)
 800086e:	f000 fa49 	bl	8000d04 <HAL_CAN_ConfigFilter>
}
 8000872:	b00b      	add	sp, #44	; 0x2c
 8000874:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000878:	f7ff ffa2 	bl	80007c0 <Error_Handler>
 800087c:	2000008c 	.word	0x2000008c
 8000880:	40004400 	.word	0x40004400
 8000884:	2000013c 	.word	0x2000013c

08000888 <SystemClock_Config>:
{
 8000888:	b500      	push	{lr}
 800088a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088c:	2244      	movs	r2, #68	; 0x44
 800088e:	2100      	movs	r1, #0
 8000890:	a805      	add	r0, sp, #20
 8000892:	f002 fe0d 	bl	80034b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000896:	2300      	movs	r3, #0
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	9302      	str	r3, [sp, #8]
 800089e:	9303      	str	r3, [sp, #12]
 80008a0:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008a6:	f000 fefd 	bl	80016a4 <HAL_PWREx_ControlVoltageScaling>
 80008aa:	bb28      	cbnz	r0, 80008f8 <SystemClock_Config+0x70>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008ac:	2310      	movs	r3, #16
 80008ae:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008b0:	2201      	movs	r2, #1
 80008b2:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008b8:	2360      	movs	r3, #96	; 0x60
 80008ba:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008c0:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c2:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80008c4:	2214      	movs	r2, #20
 80008c6:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008c8:	2207      	movs	r2, #7
 80008ca:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008cc:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ce:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	a805      	add	r0, sp, #20
 80008d2:	f000 ffd1 	bl	8001878 <HAL_RCC_OscConfig>
 80008d6:	b988      	cbnz	r0, 80008fc <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	230f      	movs	r3, #15
 80008da:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008dc:	2303      	movs	r3, #3
 80008de:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80008e0:	2390      	movs	r3, #144	; 0x90
 80008e2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2100      	movs	r1, #0
 80008e6:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e8:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ea:	4668      	mov	r0, sp
 80008ec:	f001 fad2 	bl	8001e94 <HAL_RCC_ClockConfig>
 80008f0:	b930      	cbnz	r0, 8000900 <SystemClock_Config+0x78>
}
 80008f2:	b017      	add	sp, #92	; 0x5c
 80008f4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008f8:	f7ff ff62 	bl	80007c0 <Error_Handler>
    Error_Handler();
 80008fc:	f7ff ff60 	bl	80007c0 <Error_Handler>
    Error_Handler();
 8000900:	f7ff ff5e 	bl	80007c0 <Error_Handler>

08000904 <main>:
{
 8000904:	b508      	push	{r3, lr}
  HAL_Init();
 8000906:	f000 f935 	bl	8000b74 <HAL_Init>
  SystemClock_Config();
 800090a:	f7ff ffbd 	bl	8000888 <SystemClock_Config>
  MX_GPIO_Init();
 800090e:	f7ff fddd 	bl	80004cc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000912:	f7ff ff57 	bl	80007c4 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000916:	f7ff ff85 	bl	8000824 <MX_USART2_UART_Init>
  HAL_CAN_Start(&hcan1);
 800091a:	4c08      	ldr	r4, [pc, #32]	; (800093c <main+0x38>)
 800091c:	f104 05b0 	add.w	r5, r4, #176	; 0xb0
 8000920:	4628      	mov	r0, r5
 8000922:	f000 fa72 	bl	8000e0a <HAL_CAN_Start>
  HAL_UART_Receive_IT(&huart2, UART_RxData, sizeof(UART_RxData));
 8000926:	220e      	movs	r2, #14
 8000928:	4621      	mov	r1, r4
 800092a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800092e:	f002 fd33 	bl	8003398 <HAL_UART_Receive_IT>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); //activating CAN Receive interrupt
 8000932:	2102      	movs	r1, #2
 8000934:	4628      	mov	r0, r5
 8000936:	f000 fbb0 	bl	800109a <HAL_CAN_ActivateNotification>
  while (1)
 800093a:	e7fe      	b.n	800093a <main+0x36>
 800093c:	2000008c 	.word	0x2000008c

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_MspInit+0x2c>)
 8000944:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000946:	f042 0201 	orr.w	r2, r2, #1
 800094a:	661a      	str	r2, [r3, #96]	; 0x60
 800094c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800094e:	f002 0201 	and.w	r2, r2, #1
 8000952:	9200      	str	r2, [sp, #0]
 8000954:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000958:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800095c:	659a      	str	r2, [r3, #88]	; 0x58
 800095e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000968:	b002      	add	sp, #8
 800096a:	4770      	bx	lr
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000970:	b500      	push	{lr}
 8000972:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	2300      	movs	r3, #0
 8000976:	9303      	str	r3, [sp, #12]
 8000978:	9304      	str	r3, [sp, #16]
 800097a:	9305      	str	r3, [sp, #20]
 800097c:	9306      	str	r3, [sp, #24]
 800097e:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 8000980:	6802      	ldr	r2, [r0, #0]
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_CAN_MspInit+0x84>)
 8000984:	429a      	cmp	r2, r3
 8000986:	d002      	beq.n	800098e <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000988:	b009      	add	sp, #36	; 0x24
 800098a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 800098e:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8000992:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000994:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000998:	659a      	str	r2, [r3, #88]	; 0x58
 800099a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800099c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80009a0:	9201      	str	r2, [sp, #4]
 80009a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009a6:	f042 0201 	orr.w	r2, r2, #1
 80009aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	9302      	str	r3, [sp, #8]
 80009b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009c4:	2309      	movs	r3, #9
 80009c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	a903      	add	r1, sp, #12
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ce:	f000 fd61 	bl	8001494 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	4611      	mov	r1, r2
 80009d6:	2014      	movs	r0, #20
 80009d8:	f000 fcb4 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009dc:	2014      	movs	r0, #20
 80009de:	f000 fce9 	bl	80013b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	4611      	mov	r1, r2
 80009e6:	2015      	movs	r0, #21
 80009e8:	f000 fcac 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80009ec:	2015      	movs	r0, #21
 80009ee:	f000 fce1 	bl	80013b4 <HAL_NVIC_EnableIRQ>
}
 80009f2:	e7c9      	b.n	8000988 <HAL_CAN_MspInit+0x18>
 80009f4:	40006400 	.word	0x40006400

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b510      	push	{r4, lr}
 80009fa:	b0aa      	sub	sp, #168	; 0xa8
 80009fc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	2100      	movs	r1, #0
 8000a00:	9125      	str	r1, [sp, #148]	; 0x94
 8000a02:	9126      	str	r1, [sp, #152]	; 0x98
 8000a04:	9127      	str	r1, [sp, #156]	; 0x9c
 8000a06:	9128      	str	r1, [sp, #160]	; 0xa0
 8000a08:	9129      	str	r1, [sp, #164]	; 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a0a:	2288      	movs	r2, #136	; 0x88
 8000a0c:	a803      	add	r0, sp, #12
 8000a0e:	f002 fd4f 	bl	80034b0 <memset>
  if(huart->Instance==USART2)
 8000a12:	6822      	ldr	r2, [r4, #0]
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_UART_MspInit+0x90>)
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d001      	beq.n	8000a1e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a1a:	b02a      	add	sp, #168	; 0xa8
 8000a1c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a22:	a803      	add	r0, sp, #12
 8000a24:	f001 fc82 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 8000a28:	bb50      	cbnz	r0, 8000a80 <HAL_UART_MspInit+0x88>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_UART_MspInit+0x94>)
 8000a2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a32:	659a      	str	r2, [r3, #88]	; 0x58
 8000a34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a36:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000a3a:	9201      	str	r2, [sp, #4]
 8000a3c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a40:	f042 0201 	orr.w	r2, r2, #1
 8000a44:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	9302      	str	r3, [sp, #8]
 8000a4e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a50:	230c      	movs	r3, #12
 8000a52:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2400      	movs	r4, #0
 8000a5a:	9427      	str	r4, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a60:	2307      	movs	r3, #7
 8000a62:	9329      	str	r3, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	a925      	add	r1, sp, #148	; 0x94
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 fd13 	bl	8001494 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a6e:	4622      	mov	r2, r4
 8000a70:	4621      	mov	r1, r4
 8000a72:	2026      	movs	r0, #38	; 0x26
 8000a74:	f000 fc66 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a78:	2026      	movs	r0, #38	; 0x26
 8000a7a:	f000 fc9b 	bl	80013b4 <HAL_NVIC_EnableIRQ>
}
 8000a7e:	e7cc      	b.n	8000a1a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000a80:	f7ff fe9e 	bl	80007c0 <Error_Handler>
 8000a84:	e7d1      	b.n	8000a2a <HAL_UART_MspInit+0x32>
 8000a86:	bf00      	nop
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40021000 	.word	0x40021000

08000a90 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler>

08000a92 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler>

08000a94 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler>

08000a96 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler>

08000a98 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler>

08000a9a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	4770      	bx	lr

08000a9e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa2:	f000 f877 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa6:	bd08      	pop	{r3, pc}

08000aa8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000aa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000aaa:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <CAN1_RX0_IRQHandler+0xc>)
 8000aac:	f000 fb13 	bl	80010d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ab0:	bd08      	pop	{r3, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000013c 	.word	0x2000013c

08000ab8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000ab8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000aba:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <CAN1_RX1_IRQHandler+0xc>)
 8000abc:	f000 fb0b 	bl	80010d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000ac0:	bd08      	pop	{r3, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000013c 	.word	0x2000013c

08000ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ac8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aca:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <USART2_IRQHandler+0xc>)
 8000acc:	f001 fe9e 	bl	800280c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ad0:	bd08      	pop	{r3, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000b8 	.word	0x200000b8

08000ad8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000ad8:	b508      	push	{r3, lr}
 8000ada:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000adc:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <_sbrk+0x34>)
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	b142      	cbz	r2, 8000af4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <_sbrk+0x34>)
 8000ae4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000ae6:	4403      	add	r3, r0
 8000ae8:	466a      	mov	r2, sp
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d806      	bhi.n	8000afc <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <_sbrk+0x34>)
 8000af0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8000af2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000af4:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <_sbrk+0x34>)
 8000af6:	4906      	ldr	r1, [pc, #24]	; (8000b10 <_sbrk+0x38>)
 8000af8:	6011      	str	r1, [r2, #0]
 8000afa:	e7f2      	b.n	8000ae2 <_sbrk+0xa>
		errno = ENOMEM;
 8000afc:	f002 fca6 	bl	800344c <__errno>
 8000b00:	230c      	movs	r3, #12
 8000b02:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	e7f3      	b.n	8000af2 <_sbrk+0x1a>
 8000b0a:	bf00      	nop
 8000b0c:	20000180 	.word	0x20000180
 8000b10:	200001a0 	.word	0x200001a0

08000b14 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b14:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <SystemInit+0x10>)
 8000b16:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000b1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_InitTick+0x44>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b90b      	cbnz	r3, 8000b32 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b2e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000b30:	4770      	bx	lr
{
 8000b32:	b510      	push	{r4, lr}
 8000b34:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b3e:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <HAL_InitTick+0x48>)
 8000b40:	6810      	ldr	r0, [r2, #0]
 8000b42:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b46:	f000 fc43 	bl	80013d0 <HAL_SYSTICK_Config>
 8000b4a:	b968      	cbnz	r0, 8000b68 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4c:	2c0f      	cmp	r4, #15
 8000b4e:	d901      	bls.n	8000b54 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000b50:	2001      	movs	r0, #1
 8000b52:	e00a      	b.n	8000b6a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	4621      	mov	r1, r4
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 fbf2 	bl	8001344 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <HAL_InitTick+0x44>)
 8000b62:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b64:	2000      	movs	r0, #0
 8000b66:	e000      	b.n	8000b6a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000b68:	2001      	movs	r0, #1
}
 8000b6a:	bd10      	pop	{r4, pc}
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	20000000 	.word	0x20000000

08000b74 <HAL_Init>:
{
 8000b74:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f000 fbd2 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7c:	200f      	movs	r0, #15
 8000b7e:	f7ff ffd3 	bl	8000b28 <HAL_InitTick>
 8000b82:	b110      	cbz	r0, 8000b8a <HAL_Init+0x16>
    status = HAL_ERROR;
 8000b84:	2401      	movs	r4, #1
}
 8000b86:	4620      	mov	r0, r4
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	4604      	mov	r4, r0
    HAL_MspInit();
 8000b8c:	f7ff fed8 	bl	8000940 <HAL_MspInit>
 8000b90:	e7f9      	b.n	8000b86 <HAL_Init+0x12>
	...

08000b94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_IncTick+0x10>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <HAL_IncTick+0x14>)
 8000b9a:	6811      	ldr	r1, [r2, #0]
 8000b9c:	440b      	add	r3, r1
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000004 	.word	0x20000004
 8000ba8:	20000188 	.word	0x20000188

08000bac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bac:	4b01      	ldr	r3, [pc, #4]	; (8000bb4 <HAL_GetTick+0x8>)
 8000bae:	6818      	ldr	r0, [r3, #0]
}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000188 	.word	0x20000188

08000bb8 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	f000 80a1 	beq.w	8000d00 <HAL_CAN_Init+0x148>
{
 8000bbe:	b538      	push	{r3, r4, r5, lr}
 8000bc0:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bc2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000bc6:	b1d3      	cbz	r3, 8000bfe <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bc8:	6822      	ldr	r2, [r4, #0]
 8000bca:	6813      	ldr	r3, [r2, #0]
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bd2:	f7ff ffeb 	bl	8000bac <HAL_GetTick>
 8000bd6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	f012 0f01 	tst.w	r2, #1
 8000be0:	d110      	bne.n	8000c04 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000be2:	f7ff ffe3 	bl	8000bac <HAL_GetTick>
 8000be6:	1b40      	subs	r0, r0, r5
 8000be8:	280a      	cmp	r0, #10
 8000bea:	d9f5      	bls.n	8000bd8 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf2:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000bfa:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000bfc:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000bfe:	f7ff feb7 	bl	8000970 <HAL_CAN_MspInit>
 8000c02:	e7e1      	b.n	8000bc8 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	f022 0202 	bic.w	r2, r2, #2
 8000c0a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c0c:	f7ff ffce 	bl	8000bac <HAL_GetTick>
 8000c10:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	f012 0f02 	tst.w	r2, #2
 8000c1a:	d00d      	beq.n	8000c38 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c1c:	f7ff ffc6 	bl	8000bac <HAL_GetTick>
 8000c20:	1b40      	subs	r0, r0, r5
 8000c22:	280a      	cmp	r0, #10
 8000c24:	d9f5      	bls.n	8000c12 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000c34:	2001      	movs	r0, #1
 8000c36:	e7e1      	b.n	8000bfc <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c38:	7e22      	ldrb	r2, [r4, #24]
 8000c3a:	2a01      	cmp	r2, #1
 8000c3c:	d03d      	beq.n	8000cba <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c44:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c46:	7e63      	ldrb	r3, [r4, #25]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d03b      	beq.n	8000cc4 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c4c:	6822      	ldr	r2, [r4, #0]
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c54:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c56:	7ea3      	ldrb	r3, [r4, #26]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d039      	beq.n	8000cd0 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c5c:	6822      	ldr	r2, [r4, #0]
 8000c5e:	6813      	ldr	r3, [r2, #0]
 8000c60:	f023 0320 	bic.w	r3, r3, #32
 8000c64:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c66:	7ee3      	ldrb	r3, [r4, #27]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d037      	beq.n	8000cdc <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c6c:	6822      	ldr	r2, [r4, #0]
 8000c6e:	6813      	ldr	r3, [r2, #0]
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c76:	7f23      	ldrb	r3, [r4, #28]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d035      	beq.n	8000ce8 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c7c:	6822      	ldr	r2, [r4, #0]
 8000c7e:	6813      	ldr	r3, [r2, #0]
 8000c80:	f023 0308 	bic.w	r3, r3, #8
 8000c84:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c86:	7f63      	ldrb	r3, [r4, #29]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d033      	beq.n	8000cf4 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c8c:	6822      	ldr	r2, [r4, #0]
 8000c8e:	6813      	ldr	r3, [r2, #0]
 8000c90:	f023 0304 	bic.w	r3, r3, #4
 8000c94:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c96:	68a3      	ldr	r3, [r4, #8]
 8000c98:	68e2      	ldr	r2, [r4, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	6922      	ldr	r2, [r4, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	6962      	ldr	r2, [r4, #20]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	6862      	ldr	r2, [r4, #4]
 8000ca6:	3a01      	subs	r2, #1
 8000ca8:	6821      	ldr	r1, [r4, #0]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cae:	2000      	movs	r0, #0
 8000cb0:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000cb8:	e7a0      	b.n	8000bfc <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e7c0      	b.n	8000c46 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cc4:	6822      	ldr	r2, [r4, #0]
 8000cc6:	6813      	ldr	r3, [r2, #0]
 8000cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e7c2      	b.n	8000c56 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cd0:	6822      	ldr	r2, [r4, #0]
 8000cd2:	6813      	ldr	r3, [r2, #0]
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e7c4      	b.n	8000c66 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cdc:	6822      	ldr	r2, [r4, #0]
 8000cde:	6813      	ldr	r3, [r2, #0]
 8000ce0:	f023 0310 	bic.w	r3, r3, #16
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e7c6      	b.n	8000c76 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ce8:	6822      	ldr	r2, [r4, #0]
 8000cea:	6813      	ldr	r3, [r2, #0]
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e7c8      	b.n	8000c86 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cf4:	6822      	ldr	r2, [r4, #0]
 8000cf6:	6813      	ldr	r3, [r2, #0]
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e7ca      	b.n	8000c96 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8000d00:	2001      	movs	r0, #1
}
 8000d02:	4770      	bx	lr

08000d04 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d04:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d06:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d905      	bls.n	8000d1e <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d12:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d18:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000d1a:	2001      	movs	r0, #1
  }
}
 8000d1c:	4770      	bx	lr
{
 8000d1e:	b430      	push	{r4, r5}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d20:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d2c:	694b      	ldr	r3, [r1, #20]
 8000d2e:	f003 031f 	and.w	r3, r3, #31
 8000d32:	2001      	movs	r0, #1
 8000d34:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d38:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8000d3c:	ea6f 0c03 	mvn.w	ip, r3
 8000d40:	ea20 0003 	bic.w	r0, r0, r3
 8000d44:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d48:	69c8      	ldr	r0, [r1, #28]
 8000d4a:	b9b0      	cbnz	r0, 8000d7a <HAL_CAN_ConfigFilter+0x76>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d4c:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8000d50:	ea0c 0000 	and.w	r0, ip, r0
 8000d54:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d58:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d5a:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d5c:	68cd      	ldr	r5, [r1, #12]
 8000d5e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d62:	3048      	adds	r0, #72	; 0x48
 8000d64:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d68:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d6a:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d6c:	688d      	ldr	r5, [r1, #8]
 8000d6e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d72:	3048      	adds	r0, #72	; 0x48
 8000d74:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8000d78:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d7a:	69c8      	ldr	r0, [r1, #28]
 8000d7c:	2801      	cmp	r0, #1
 8000d7e:	d01b      	beq.n	8000db8 <HAL_CAN_ConfigFilter+0xb4>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d80:	6988      	ldr	r0, [r1, #24]
 8000d82:	bb80      	cbnz	r0, 8000de6 <HAL_CAN_ConfigFilter+0xe2>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8000d88:	ea0c 0000 	and.w	r0, ip, r0
 8000d8c:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d90:	6908      	ldr	r0, [r1, #16]
 8000d92:	bb70      	cbnz	r0, 8000df2 <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d94:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8000d98:	ea0c 0000 	and.w	r0, ip, r0
 8000d9c:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000da0:	6a09      	ldr	r1, [r1, #32]
 8000da2:	2901      	cmp	r1, #1
 8000da4:	d02b      	beq.n	8000dfe <HAL_CAN_ConfigFilter+0xfa>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000da6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000daa:	f023 0301 	bic.w	r3, r3, #1
 8000dae:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8000db2:	2000      	movs	r0, #0
}
 8000db4:	bc30      	pop	{r4, r5}
 8000db6:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000db8:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8000dbc:	4318      	orrs	r0, r3
 8000dbe:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dc2:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dc4:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dc6:	680d      	ldr	r5, [r1, #0]
 8000dc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dcc:	3048      	adds	r0, #72	; 0x48
 8000dce:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000dd2:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dd4:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dd6:	688d      	ldr	r5, [r1, #8]
 8000dd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ddc:	3048      	adds	r0, #72	; 0x48
 8000dde:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8000de2:	6044      	str	r4, [r0, #4]
 8000de4:	e7cc      	b.n	8000d80 <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000de6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8000dea:	4318      	orrs	r0, r3
 8000dec:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
 8000df0:	e7ce      	b.n	8000d90 <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000df2:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8000df6:	4318      	orrs	r0, r3
 8000df8:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8000dfc:	e7d0      	b.n	8000da0 <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dfe:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000e02:	430b      	orrs	r3, r1
 8000e04:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 8000e08:	e7cd      	b.n	8000da6 <HAL_CAN_ConfigFilter+0xa2>

08000e0a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e0a:	b570      	push	{r4, r5, r6, lr}
 8000e0c:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e0e:	f890 5020 	ldrb.w	r5, [r0, #32]
 8000e12:	b2ed      	uxtb	r5, r5
 8000e14:	2d01      	cmp	r5, #1
 8000e16:	d006      	beq.n	8000e26 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e1e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000e20:	2501      	movs	r5, #1
  }
}
 8000e22:	4628      	mov	r0, r5
 8000e24:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e2c:	6802      	ldr	r2, [r0, #0]
 8000e2e:	6813      	ldr	r3, [r2, #0]
 8000e30:	f023 0301 	bic.w	r3, r3, #1
 8000e34:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000e36:	f7ff feb9 	bl	8000bac <HAL_GetTick>
 8000e3a:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f013 0f01 	tst.w	r3, #1
 8000e44:	d00c      	beq.n	8000e60 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e46:	f7ff feb1 	bl	8000bac <HAL_GetTick>
 8000e4a:	1b83      	subs	r3, r0, r6
 8000e4c:	2b0a      	cmp	r3, #10
 8000e4e:	d9f5      	bls.n	8000e3c <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e56:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e58:	2305      	movs	r3, #5
 8000e5a:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8000e5e:	e7e0      	b.n	8000e22 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e60:	2500      	movs	r5, #0
 8000e62:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8000e64:	e7dd      	b.n	8000e22 <HAL_CAN_Start+0x18>

08000e66 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e66:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e68:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e6c:	6804      	ldr	r4, [r0, #0]
 8000e6e:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e70:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000e74:	fa5f fc8c 	uxtb.w	ip, ip
 8000e78:	f1bc 0f01 	cmp.w	ip, #1
 8000e7c:	d862      	bhi.n	8000f44 <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e7e:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000e82:	d059      	beq.n	8000f38 <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e84:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e88:	2401      	movs	r4, #1
 8000e8a:	fa04 f40c 	lsl.w	r4, r4, ip
 8000e8e:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e90:	688b      	ldr	r3, [r1, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d13d      	bne.n	8000f12 <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e96:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 8000e98:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e9a:	6804      	ldr	r4, [r0, #0]
 8000e9c:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 8000ea0:	f10c 0318 	add.w	r3, ip, #24
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ea8:	6803      	ldr	r3, [r0, #0]
 8000eaa:	690c      	ldr	r4, [r1, #16]
 8000eac:	f10c 0e18 	add.w	lr, ip, #24
 8000eb0:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8000eb4:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000eb6:	7d0b      	ldrb	r3, [r1, #20]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d035      	beq.n	8000f28 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ebc:	79d1      	ldrb	r1, [r2, #7]
 8000ebe:	7993      	ldrb	r3, [r2, #6]
 8000ec0:	041b      	lsls	r3, r3, #16
 8000ec2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000ec6:	7951      	ldrb	r1, [r2, #5]
 8000ec8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000ecc:	7914      	ldrb	r4, [r2, #4]
 8000ece:	6801      	ldr	r1, [r0, #0]
 8000ed0:	4323      	orrs	r3, r4
 8000ed2:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8000ed6:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000eda:	78d1      	ldrb	r1, [r2, #3]
 8000edc:	7893      	ldrb	r3, [r2, #2]
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000ee4:	7851      	ldrb	r1, [r2, #1]
 8000ee6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000eea:	7811      	ldrb	r1, [r2, #0]
 8000eec:	6802      	ldr	r2, [r0, #0]
 8000eee:	430b      	orrs	r3, r1
 8000ef0:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8000ef4:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ef8:	6802      	ldr	r2, [r0, #0]
 8000efa:	f10c 0c18 	add.w	ip, ip, #24
 8000efe:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000f02:	f852 300c 	ldr.w	r3, [r2, ip]
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 8000f0e:	2000      	movs	r0, #0
 8000f10:	e01d      	b.n	8000f4e <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f12:	684c      	ldr	r4, [r1, #4]
 8000f14:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 8000f18:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 8000f1a:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f1c:	f10c 0418 	add.w	r4, ip, #24
 8000f20:	0124      	lsls	r4, r4, #4
 8000f22:	6805      	ldr	r5, [r0, #0]
 8000f24:	512b      	str	r3, [r5, r4]
 8000f26:	e7bf      	b.n	8000ea8 <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f28:	6803      	ldr	r3, [r0, #0]
 8000f2a:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8000f2e:	6859      	ldr	r1, [r3, #4]
 8000f30:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000f34:	6059      	str	r1, [r3, #4]
 8000f36:	e7c1      	b.n	8000ebc <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f3e:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 8000f40:	2001      	movs	r0, #1
 8000f42:	e004      	b.n	8000f4e <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000f4c:	2001      	movs	r0, #1
  }
}
 8000f4e:	bd30      	pop	{r4, r5, pc}

08000f50 <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f50:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f54:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000f58:	fa5f fc8c 	uxtb.w	ip, ip
 8000f5c:	f1bc 0f01 	cmp.w	ip, #1
 8000f60:	f200 8095 	bhi.w	800108e <HAL_CAN_GetRxMessage+0x13e>
{
 8000f64:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f66:	b951      	cbnz	r1, 8000f7e <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f68:	6804      	ldr	r4, [r0, #0]
 8000f6a:	68e4      	ldr	r4, [r4, #12]
 8000f6c:	f014 0f03 	tst.w	r4, #3
 8000f70:	d110      	bne.n	8000f94 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f78:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	e077      	b.n	800106e <HAL_CAN_GetRxMessage+0x11e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f7e:	6804      	ldr	r4, [r0, #0]
 8000f80:	6924      	ldr	r4, [r4, #16]
 8000f82:	f014 0f03 	tst.w	r4, #3
 8000f86:	d105      	bne.n	8000f94 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f8e:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8000f90:	2001      	movs	r0, #1
 8000f92:	e06c      	b.n	800106e <HAL_CAN_GetRxMessage+0x11e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f94:	f101 041b 	add.w	r4, r1, #27
 8000f98:	0124      	lsls	r4, r4, #4
 8000f9a:	6805      	ldr	r5, [r0, #0]
 8000f9c:	592c      	ldr	r4, [r5, r4]
 8000f9e:	f004 0404 	and.w	r4, r4, #4
 8000fa2:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000fa4:	2c00      	cmp	r4, #0
 8000fa6:	d164      	bne.n	8001072 <HAL_CAN_GetRxMessage+0x122>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000fa8:	f101 041b 	add.w	r4, r1, #27
 8000fac:	0124      	lsls	r4, r4, #4
 8000fae:	6805      	ldr	r5, [r0, #0]
 8000fb0:	592c      	ldr	r4, [r5, r4]
 8000fb2:	0d64      	lsrs	r4, r4, #21
 8000fb4:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000fb6:	6804      	ldr	r4, [r0, #0]
 8000fb8:	f101 0c1b 	add.w	ip, r1, #27
 8000fbc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000fc0:	f854 400c 	ldr.w	r4, [r4, ip]
 8000fc4:	f004 0402 	and.w	r4, r4, #2
 8000fc8:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fca:	6804      	ldr	r4, [r0, #0]
 8000fcc:	4464      	add	r4, ip
 8000fce:	6864      	ldr	r4, [r4, #4]
 8000fd0:	f004 040f 	and.w	r4, r4, #15
 8000fd4:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fd6:	6804      	ldr	r4, [r0, #0]
 8000fd8:	4464      	add	r4, ip
 8000fda:	6864      	ldr	r4, [r4, #4]
 8000fdc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000fe0:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fe2:	6804      	ldr	r4, [r0, #0]
 8000fe4:	4464      	add	r4, ip
 8000fe6:	6864      	ldr	r4, [r4, #4]
 8000fe8:	0c24      	lsrs	r4, r4, #16
 8000fea:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fec:	6802      	ldr	r2, [r0, #0]
 8000fee:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000ff2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000ff6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000ff8:	6802      	ldr	r2, [r0, #0]
 8000ffa:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000ffe:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001002:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001006:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001008:	6802      	ldr	r2, [r0, #0]
 800100a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800100e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001012:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001016:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001018:	6802      	ldr	r2, [r0, #0]
 800101a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800101e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001022:	0e12      	lsrs	r2, r2, #24
 8001024:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001026:	6802      	ldr	r2, [r0, #0]
 8001028:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800102c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001030:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001032:	6802      	ldr	r2, [r0, #0]
 8001034:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001038:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800103c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001040:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001042:	6802      	ldr	r2, [r0, #0]
 8001044:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001048:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800104c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001050:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001052:	6802      	ldr	r2, [r0, #0]
 8001054:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001058:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800105c:	0e12      	lsrs	r2, r2, #24
 800105e:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001060:	b979      	cbnz	r1, 8001082 <HAL_CAN_GetRxMessage+0x132>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001062:	6802      	ldr	r2, [r0, #0]
 8001064:	68d3      	ldr	r3, [r2, #12]
 8001066:	f043 0320 	orr.w	r3, r3, #32
 800106a:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 800106c:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800106e:	bc30      	pop	{r4, r5}
 8001070:	4770      	bx	lr
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001072:	f101 041b 	add.w	r4, r1, #27
 8001076:	0124      	lsls	r4, r4, #4
 8001078:	6805      	ldr	r5, [r0, #0]
 800107a:	592c      	ldr	r4, [r5, r4]
 800107c:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800107e:	6054      	str	r4, [r2, #4]
 8001080:	e799      	b.n	8000fb6 <HAL_CAN_GetRxMessage+0x66>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001082:	6802      	ldr	r2, [r0, #0]
 8001084:	6913      	ldr	r3, [r2, #16]
 8001086:	f043 0320 	orr.w	r3, r3, #32
 800108a:	6113      	str	r3, [r2, #16]
 800108c:	e7ee      	b.n	800106c <HAL_CAN_GetRxMessage+0x11c>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800108e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001094:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
}
 8001098:	4770      	bx	lr

0800109a <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800109a:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800109e:	3b01      	subs	r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d905      	bls.n	80010b2 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ac:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80010ae:	2001      	movs	r0, #1
  }
}
 80010b0:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80010b2:	6802      	ldr	r2, [r0, #0]
 80010b4:	6953      	ldr	r3, [r2, #20]
 80010b6:	4319      	orrs	r1, r3
 80010b8:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80010ba:	2000      	movs	r0, #0
 80010bc:	4770      	bx	lr

080010be <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80010be:	4770      	bx	lr

080010c0 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80010c0:	4770      	bx	lr

080010c2 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80010c2:	4770      	bx	lr

080010c4 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80010c4:	4770      	bx	lr

080010c6 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80010c6:	4770      	bx	lr

080010c8 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80010c8:	4770      	bx	lr

080010ca <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80010ca:	4770      	bx	lr

080010cc <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80010cc:	4770      	bx	lr

080010ce <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80010ce:	4770      	bx	lr

080010d0 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80010d0:	4770      	bx	lr

080010d2 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80010d2:	4770      	bx	lr

080010d4 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80010d4:	4770      	bx	lr

080010d6 <HAL_CAN_IRQHandler>:
{
 80010d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010da:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80010dc:	6803      	ldr	r3, [r0, #0]
 80010de:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80010e0:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010e4:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80010e6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80010ea:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010ee:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010f2:	f014 0601 	ands.w	r6, r4, #1
 80010f6:	d03b      	beq.n	8001170 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010f8:	f017 0601 	ands.w	r6, r7, #1
 80010fc:	d016      	beq.n	800112c <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010fe:	2201      	movs	r2, #1
 8001100:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001102:	f017 0f02 	tst.w	r7, #2
 8001106:	d108      	bne.n	800111a <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001108:	f017 0f04 	tst.w	r7, #4
 800110c:	d10c      	bne.n	8001128 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800110e:	f017 0608 	ands.w	r6, r7, #8
 8001112:	d006      	beq.n	8001122 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001114:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8001118:	e008      	b.n	800112c <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800111a:	f7ff ffd0 	bl	80010be <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800111e:	2600      	movs	r6, #0
 8001120:	e004      	b.n	800112c <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001122:	f7ff ffcf 	bl	80010c4 <HAL_CAN_TxMailbox0AbortCallback>
 8001126:	e001      	b.n	800112c <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001128:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800112c:	f417 7f80 	tst.w	r7, #256	; 0x100
 8001130:	d00d      	beq.n	800114e <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001132:	682b      	ldr	r3, [r5, #0]
 8001134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001138:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800113a:	f417 7f00 	tst.w	r7, #512	; 0x200
 800113e:	f040 8086 	bne.w	800124e <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001142:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8001146:	f000 8086 	beq.w	8001256 <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800114a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800114e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001152:	d00d      	beq.n	8001170 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001154:	682b      	ldr	r3, [r5, #0]
 8001156:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800115a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800115c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001160:	f040 8083 	bne.w	800126a <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001164:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 8001168:	f000 8083 	beq.w	8001272 <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800116c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001170:	f014 0f08 	tst.w	r4, #8
 8001174:	d007      	beq.n	8001186 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001176:	f01b 0f10 	tst.w	fp, #16
 800117a:	d004      	beq.n	8001186 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800117c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001180:	682b      	ldr	r3, [r5, #0]
 8001182:	2210      	movs	r2, #16
 8001184:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001186:	f014 0f04 	tst.w	r4, #4
 800118a:	d002      	beq.n	8001192 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800118c:	f01b 0f08 	tst.w	fp, #8
 8001190:	d179      	bne.n	8001286 <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001192:	f014 0f02 	tst.w	r4, #2
 8001196:	d004      	beq.n	80011a2 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f013 0f03 	tst.w	r3, #3
 80011a0:	d178      	bne.n	8001294 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011a2:	f014 0f40 	tst.w	r4, #64	; 0x40
 80011a6:	d007      	beq.n	80011b8 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011a8:	f01a 0f10 	tst.w	sl, #16
 80011ac:	d004      	beq.n	80011b8 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011ae:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011b2:	682b      	ldr	r3, [r5, #0]
 80011b4:	2210      	movs	r2, #16
 80011b6:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011b8:	f014 0f20 	tst.w	r4, #32
 80011bc:	d002      	beq.n	80011c4 <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80011be:	f01a 0f08 	tst.w	sl, #8
 80011c2:	d16b      	bne.n	800129c <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011c4:	f014 0f10 	tst.w	r4, #16
 80011c8:	d004      	beq.n	80011d4 <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80011ca:	682b      	ldr	r3, [r5, #0]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	f013 0f03 	tst.w	r3, #3
 80011d2:	d16a      	bne.n	80012aa <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80011d4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80011d8:	d002      	beq.n	80011e0 <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80011da:	f018 0f10 	tst.w	r8, #16
 80011de:	d168      	bne.n	80012b2 <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80011e0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80011e4:	d002      	beq.n	80011ec <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80011e6:	f018 0f08 	tst.w	r8, #8
 80011ea:	d169      	bne.n	80012c0 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80011ec:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80011f0:	d07a      	beq.n	80012e8 <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80011f2:	f018 0f04 	tst.w	r8, #4
 80011f6:	d074      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80011f8:	f414 7f80 	tst.w	r4, #256	; 0x100
 80011fc:	d004      	beq.n	8001208 <HAL_CAN_IRQHandler+0x132>
 80011fe:	f019 0f01 	tst.w	r9, #1
 8001202:	d001      	beq.n	8001208 <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 8001204:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001208:	f414 7f00 	tst.w	r4, #512	; 0x200
 800120c:	d004      	beq.n	8001218 <HAL_CAN_IRQHandler+0x142>
 800120e:	f019 0f02 	tst.w	r9, #2
 8001212:	d001      	beq.n	8001218 <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 8001214:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001218:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800121c:	d004      	beq.n	8001228 <HAL_CAN_IRQHandler+0x152>
 800121e:	f019 0f04 	tst.w	r9, #4
 8001222:	d001      	beq.n	8001228 <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 8001224:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001228:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800122c:	d059      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x20c>
 800122e:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8001232:	d056      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 8001234:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8001238:	d065      	beq.n	8001306 <HAL_CAN_IRQHandler+0x230>
 800123a:	d858      	bhi.n	80012ee <HAL_CAN_IRQHandler+0x218>
 800123c:	f1b9 0f20 	cmp.w	r9, #32
 8001240:	d05e      	beq.n	8001300 <HAL_CAN_IRQHandler+0x22a>
 8001242:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8001246:	d142      	bne.n	80012ce <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001248:	f046 0620 	orr.w	r6, r6, #32
            break;
 800124c:	e044      	b.n	80012d8 <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800124e:	4628      	mov	r0, r5
 8001250:	f7ff ff36 	bl	80010c0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001254:	e77b      	b.n	800114e <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001256:	f417 6f00 	tst.w	r7, #2048	; 0x800
 800125a:	d002      	beq.n	8001262 <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800125c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001260:	e775      	b.n	800114e <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001262:	4628      	mov	r0, r5
 8001264:	f7ff ff2f 	bl	80010c6 <HAL_CAN_TxMailbox1AbortCallback>
 8001268:	e771      	b.n	800114e <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800126a:	4628      	mov	r0, r5
 800126c:	f7ff ff29 	bl	80010c2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001270:	e77e      	b.n	8001170 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001272:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 8001276:	d002      	beq.n	800127e <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001278:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 800127c:	e778      	b.n	8001170 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800127e:	4628      	mov	r0, r5
 8001280:	f7ff ff22 	bl	80010c8 <HAL_CAN_TxMailbox2AbortCallback>
 8001284:	e774      	b.n	8001170 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001286:	682b      	ldr	r3, [r5, #0]
 8001288:	2208      	movs	r2, #8
 800128a:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800128c:	4628      	mov	r0, r5
 800128e:	f7ff ff1c 	bl	80010ca <HAL_CAN_RxFifo0FullCallback>
 8001292:	e77e      	b.n	8001192 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001294:	4628      	mov	r0, r5
 8001296:	f7ff f929 	bl	80004ec <HAL_CAN_RxFifo0MsgPendingCallback>
 800129a:	e782      	b.n	80011a2 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	2208      	movs	r2, #8
 80012a0:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80012a2:	4628      	mov	r0, r5
 80012a4:	f7ff ff13 	bl	80010ce <HAL_CAN_RxFifo1FullCallback>
 80012a8:	e78c      	b.n	80011c4 <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80012aa:	4628      	mov	r0, r5
 80012ac:	f7ff ff0e 	bl	80010cc <HAL_CAN_RxFifo1MsgPendingCallback>
 80012b0:	e790      	b.n	80011d4 <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012b2:	682b      	ldr	r3, [r5, #0]
 80012b4:	2210      	movs	r2, #16
 80012b6:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80012b8:	4628      	mov	r0, r5
 80012ba:	f7ff ff09 	bl	80010d0 <HAL_CAN_SleepCallback>
 80012be:	e78f      	b.n	80011e0 <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012c0:	682b      	ldr	r3, [r5, #0]
 80012c2:	2208      	movs	r2, #8
 80012c4:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012c6:	4628      	mov	r0, r5
 80012c8:	f7ff ff03 	bl	80010d2 <HAL_CAN_WakeUpFromRxMsgCallback>
 80012cc:	e78e      	b.n	80011ec <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 80012ce:	f1b9 0f10 	cmp.w	r9, #16
 80012d2:	d101      	bne.n	80012d8 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 80012d4:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80012d8:	682a      	ldr	r2, [r5, #0]
 80012da:	6993      	ldr	r3, [r2, #24]
 80012dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012e0:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80012e2:	682b      	ldr	r3, [r5, #0]
 80012e4:	2204      	movs	r2, #4
 80012e6:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80012e8:	b99e      	cbnz	r6, 8001312 <HAL_CAN_IRQHandler+0x23c>
}
 80012ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 80012ee:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 80012f2:	d00b      	beq.n	800130c <HAL_CAN_IRQHandler+0x236>
 80012f4:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 80012f8:	d1ee      	bne.n	80012d8 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 80012fa:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 80012fe:	e7eb      	b.n	80012d8 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001300:	f046 0610 	orr.w	r6, r6, #16
            break;
 8001304:	e7e8      	b.n	80012d8 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 8001306:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 800130a:	e7e5      	b.n	80012d8 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 800130c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8001310:	e7e2      	b.n	80012d8 <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8001312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001314:	431e      	orrs	r6, r3
 8001316:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001318:	4628      	mov	r0, r5
 800131a:	f7ff fedb 	bl	80010d4 <HAL_CAN_ErrorCallback>
}
 800131e:	e7e4      	b.n	80012ea <HAL_CAN_IRQHandler+0x214>

08001320 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001322:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001324:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001328:	041b      	lsls	r3, r3, #16
 800132a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	0200      	lsls	r0, r0, #8
 800132e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001332:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800133c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_NVIC_SetPriority+0x68>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134e:	f1c3 0c07 	rsb	ip, r3, #7
 8001352:	f1bc 0f04 	cmp.w	ip, #4
 8001356:	bf28      	it	cs
 8001358:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135c:	f103 0e04 	add.w	lr, r3, #4
 8001360:	f1be 0f06 	cmp.w	lr, #6
 8001364:	d918      	bls.n	8001398 <HAL_NVIC_SetPriority+0x54>
 8001366:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 3eff 	mov.w	lr, #4294967295
 800136c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001370:	ea21 010c 	bic.w	r1, r1, ip
 8001374:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001376:	fa0e f303 	lsl.w	r3, lr, r3
 800137a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001380:	2800      	cmp	r0, #0
 8001382:	db0b      	blt.n	800139c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	0109      	lsls	r1, r1, #4
 8001386:	b2c9      	uxtb	r1, r1
 8001388:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800138c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001390:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001394:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001398:	2300      	movs	r3, #0
 800139a:	e7e5      	b.n	8001368 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	f000 000f 	and.w	r0, r0, #15
 80013a0:	0109      	lsls	r1, r1, #4
 80013a2:	b2c9      	uxtb	r1, r1
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <HAL_NVIC_SetPriority+0x6c>)
 80013a6:	5419      	strb	r1, [r3, r0]
 80013a8:	e7f4      	b.n	8001394 <HAL_NVIC_SetPriority+0x50>
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00
 80013b0:	e000ed14 	.word	0xe000ed14

080013b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80013b4:	2800      	cmp	r0, #0
 80013b6:	db07      	blt.n	80013c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b8:	f000 021f 	and.w	r2, r0, #31
 80013bc:	0940      	lsrs	r0, r0, #5
 80013be:	2301      	movs	r3, #1
 80013c0:	4093      	lsls	r3, r2
 80013c2:	4a02      	ldr	r2, [pc, #8]	; (80013cc <HAL_NVIC_EnableIRQ+0x18>)
 80013c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	3801      	subs	r0, #1
 80013d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013d6:	d20b      	bcs.n	80013f0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80013dc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <HAL_SYSTICK_Config+0x24>)
 80013e0:	21f0      	movs	r1, #240	; 0xf0
 80013e2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e6:	2000      	movs	r0, #0
 80013e8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	2207      	movs	r2, #7
 80013ec:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ee:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013f0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d006      	beq.n	8001410 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001402:	2304      	movs	r3, #4
 8001404:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001406:	2300      	movs	r3, #0
 8001408:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800140c:	2001      	movs	r0, #1
 800140e:	4770      	bx	lr
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001410:	6802      	ldr	r2, [r0, #0]
 8001412:	6813      	ldr	r3, [r2, #0]
 8001414:	f023 030e 	bic.w	r3, r3, #14
 8001418:	6013      	str	r3, [r2, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800141a:	6802      	ldr	r2, [r0, #0]
 800141c:	6813      	ldr	r3, [r2, #0]
 800141e:	f023 0301 	bic.w	r3, r3, #1
 8001422:	6013      	str	r3, [r2, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001424:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001426:	f003 031c 	and.w	r3, r3, #28
 800142a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800142c:	2201      	movs	r2, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	604b      	str	r3, [r1, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001434:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001438:	2300      	movs	r3, #0
 800143a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return status;
 800143e:	4618      	mov	r0, r3
  }
}
 8001440:	4770      	bx	lr

08001442 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001442:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001444:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d003      	beq.n	8001456 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144e:	2304      	movs	r3, #4
 8001450:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001452:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001454:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001456:	6802      	ldr	r2, [r0, #0]
 8001458:	6813      	ldr	r3, [r2, #0]
 800145a:	f023 030e 	bic.w	r3, r3, #14
 800145e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001460:	6802      	ldr	r2, [r0, #0]
 8001462:	6813      	ldr	r3, [r2, #0]
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800146a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800146c:	f003 031c 	and.w	r3, r3, #28
 8001470:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001472:	2201      	movs	r2, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800147a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800147e:	2300      	movs	r3, #0
 8001480:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001484:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001486:	b113      	cbz	r3, 800148e <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8001488:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800148a:	2000      	movs	r0, #0
 800148c:	e7e2      	b.n	8001454 <HAL_DMA_Abort_IT+0x12>
 800148e:	2000      	movs	r0, #0
 8001490:	e7e0      	b.n	8001454 <HAL_DMA_Abort_IT+0x12>
	...

08001494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8001498:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149a:	e06b      	b.n	8001574 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800149c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800149e:	005e      	lsls	r6, r3, #1
 80014a0:	2403      	movs	r4, #3
 80014a2:	40b4      	lsls	r4, r6
 80014a4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a8:	68cc      	ldr	r4, [r1, #12]
 80014aa:	40b4      	lsls	r4, r6
 80014ac:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80014ae:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b6:	684c      	ldr	r4, [r1, #4]
 80014b8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80014bc:	409c      	lsls	r4, r3
 80014be:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80014c0:	6044      	str	r4, [r0, #4]
 80014c2:	e069      	b.n	8001598 <HAL_GPIO_Init+0x104>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014c4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014c6:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014ca:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 80014ce:	409c      	lsls	r4, r3
 80014d0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->ASCR = temp;
 80014d4:	62c4      	str	r4, [r0, #44]	; 0x2c
 80014d6:	e065      	b.n	80015a4 <HAL_GPIO_Init+0x110>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014d8:	08dd      	lsrs	r5, r3, #3
 80014da:	3508      	adds	r5, #8
 80014dc:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014e0:	f003 0407 	and.w	r4, r3, #7
 80014e4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80014e8:	240f      	movs	r4, #15
 80014ea:	fa04 f40c 	lsl.w	r4, r4, ip
 80014ee:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014f2:	690c      	ldr	r4, [r1, #16]
 80014f4:	fa04 f40c 	lsl.w	r4, r4, ip
 80014f8:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 80014fc:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001500:	e067      	b.n	80015d2 <HAL_GPIO_Init+0x13e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001502:	2406      	movs	r4, #6
 8001504:	e000      	b.n	8001508 <HAL_GPIO_Init+0x74>
 8001506:	2400      	movs	r4, #0
 8001508:	fa04 f40e 	lsl.w	r4, r4, lr
 800150c:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150e:	f10c 0c02 	add.w	ip, ip, #2
 8001512:	4d5c      	ldr	r5, [pc, #368]	; (8001684 <HAL_GPIO_Init+0x1f0>)
 8001514:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001518:	4c5b      	ldr	r4, [pc, #364]	; (8001688 <HAL_GPIO_Init+0x1f4>)
 800151a:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800151c:	43d4      	mvns	r4, r2
 800151e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001522:	684f      	ldr	r7, [r1, #4]
 8001524:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001528:	d001      	beq.n	800152e <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 800152a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800152e:	4d56      	ldr	r5, [pc, #344]	; (8001688 <HAL_GPIO_Init+0x1f4>)
 8001530:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001532:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001534:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001538:	684f      	ldr	r7, [r1, #4]
 800153a:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 800153e:	d001      	beq.n	8001544 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 8001540:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001544:	4d50      	ldr	r5, [pc, #320]	; (8001688 <HAL_GPIO_Init+0x1f4>)
 8001546:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001548:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800154a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800154e:	684f      	ldr	r7, [r1, #4]
 8001550:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001554:	d001      	beq.n	800155a <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8001556:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800155a:	4d4b      	ldr	r5, [pc, #300]	; (8001688 <HAL_GPIO_Init+0x1f4>)
 800155c:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 800155e:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8001560:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001562:	684e      	ldr	r6, [r1, #4]
 8001564:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8001568:	d001      	beq.n	800156e <HAL_GPIO_Init+0xda>
        {
          temp |= iocurrent;
 800156a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 800156e:	4a46      	ldr	r2, [pc, #280]	; (8001688 <HAL_GPIO_Init+0x1f4>)
 8001570:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8001572:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001574:	680a      	ldr	r2, [r1, #0]
 8001576:	fa32 f403 	lsrs.w	r4, r2, r3
 800157a:	f000 8081 	beq.w	8001680 <HAL_GPIO_Init+0x1ec>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800157e:	f04f 0c01 	mov.w	ip, #1
 8001582:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8001586:	ea1c 0202 	ands.w	r2, ip, r2
 800158a:	d0f2      	beq.n	8001572 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800158c:	684c      	ldr	r4, [r1, #4]
 800158e:	f004 0403 	and.w	r4, r4, #3
 8001592:	3c01      	subs	r4, #1
 8001594:	2c01      	cmp	r4, #1
 8001596:	d981      	bls.n	800149c <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001598:	684c      	ldr	r4, [r1, #4]
 800159a:	f004 0e03 	and.w	lr, r4, #3
 800159e:	f1be 0f03 	cmp.w	lr, #3
 80015a2:	d08f      	beq.n	80014c4 <HAL_GPIO_Init+0x30>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a4:	684c      	ldr	r4, [r1, #4]
 80015a6:	f004 0403 	and.w	r4, r4, #3
 80015aa:	2c03      	cmp	r4, #3
 80015ac:	d00c      	beq.n	80015c8 <HAL_GPIO_Init+0x134>
        temp = GPIOx->PUPDR;
 80015ae:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b0:	005d      	lsls	r5, r3, #1
 80015b2:	f04f 0c03 	mov.w	ip, #3
 80015b6:	fa0c fc05 	lsl.w	ip, ip, r5
 80015ba:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015be:	688c      	ldr	r4, [r1, #8]
 80015c0:	40ac      	lsls	r4, r5
 80015c2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80015c6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c8:	684c      	ldr	r4, [r1, #4]
 80015ca:	f004 0403 	and.w	r4, r4, #3
 80015ce:	2c02      	cmp	r4, #2
 80015d0:	d082      	beq.n	80014d8 <HAL_GPIO_Init+0x44>
      temp = GPIOx->MODER;
 80015d2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015d4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80015d8:	f04f 0c03 	mov.w	ip, #3
 80015dc:	fa0c fc0e 	lsl.w	ip, ip, lr
 80015e0:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015e4:	684c      	ldr	r4, [r1, #4]
 80015e6:	f004 0403 	and.w	r4, r4, #3
 80015ea:	fa04 f40e 	lsl.w	r4, r4, lr
 80015ee:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80015f2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015f4:	684c      	ldr	r4, [r1, #4]
 80015f6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80015fa:	d0ba      	beq.n	8001572 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fc:	4c23      	ldr	r4, [pc, #140]	; (800168c <HAL_GPIO_Init+0x1f8>)
 80015fe:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001600:	f045 0501 	orr.w	r5, r5, #1
 8001604:	6625      	str	r5, [r4, #96]	; 0x60
 8001606:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8001608:	f004 0401 	and.w	r4, r4, #1
 800160c:	9401      	str	r4, [sp, #4]
 800160e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001610:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8001614:	f10c 0502 	add.w	r5, ip, #2
 8001618:	4c1a      	ldr	r4, [pc, #104]	; (8001684 <HAL_GPIO_Init+0x1f0>)
 800161a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800161e:	f003 0403 	and.w	r4, r3, #3
 8001622:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8001626:	240f      	movs	r4, #15
 8001628:	fa04 f40e 	lsl.w	r4, r4, lr
 800162c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001630:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001634:	f43f af67 	beq.w	8001506 <HAL_GPIO_Init+0x72>
 8001638:	4c15      	ldr	r4, [pc, #84]	; (8001690 <HAL_GPIO_Init+0x1fc>)
 800163a:	42a0      	cmp	r0, r4
 800163c:	d016      	beq.n	800166c <HAL_GPIO_Init+0x1d8>
 800163e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001642:	42a0      	cmp	r0, r4
 8001644:	d014      	beq.n	8001670 <HAL_GPIO_Init+0x1dc>
 8001646:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800164a:	42a0      	cmp	r0, r4
 800164c:	d012      	beq.n	8001674 <HAL_GPIO_Init+0x1e0>
 800164e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001652:	42a0      	cmp	r0, r4
 8001654:	d010      	beq.n	8001678 <HAL_GPIO_Init+0x1e4>
 8001656:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800165a:	42a0      	cmp	r0, r4
 800165c:	d00e      	beq.n	800167c <HAL_GPIO_Init+0x1e8>
 800165e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001662:	42a0      	cmp	r0, r4
 8001664:	f43f af4d 	beq.w	8001502 <HAL_GPIO_Init+0x6e>
 8001668:	2407      	movs	r4, #7
 800166a:	e74d      	b.n	8001508 <HAL_GPIO_Init+0x74>
 800166c:	2401      	movs	r4, #1
 800166e:	e74b      	b.n	8001508 <HAL_GPIO_Init+0x74>
 8001670:	2402      	movs	r4, #2
 8001672:	e749      	b.n	8001508 <HAL_GPIO_Init+0x74>
 8001674:	2403      	movs	r4, #3
 8001676:	e747      	b.n	8001508 <HAL_GPIO_Init+0x74>
 8001678:	2404      	movs	r4, #4
 800167a:	e745      	b.n	8001508 <HAL_GPIO_Init+0x74>
 800167c:	2405      	movs	r4, #5
 800167e:	e743      	b.n	8001508 <HAL_GPIO_Init+0x74>
  }
}
 8001680:	b003      	add	sp, #12
 8001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001684:	40010000 	.word	0x40010000
 8001688:	40010400 	.word	0x40010400
 800168c:	40021000 	.word	0x40021000
 8001690:	48000400 	.word	0x48000400

08001694 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <HAL_PWREx_GetVoltageRange+0xc>)
 8001696:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001698:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40007000 	.word	0x40007000

080016a4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80016a8:	d00f      	beq.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b6:	d034      	beq.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80016ba:	6813      	ldr	r3, [r2, #0]
 80016bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016c6:	2000      	movs	r0, #0
 80016c8:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d6:	d020      	beq.n	800171a <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d8:	4a13      	ldr	r2, [pc, #76]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80016da:	6813      	ldr	r3, [r2, #0]
 80016dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e4:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_PWREx_ControlVoltageScaling+0x88>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2232      	movs	r2, #50	; 0x32
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
 80016f0:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9b      	lsrs	r3, r3, #18
 80016f8:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016fa:	e000      	b.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 80016fc:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001700:	6952      	ldr	r2, [r2, #20]
 8001702:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001706:	d001      	beq.n	800170c <HAL_PWREx_ControlVoltageScaling+0x68>
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f7      	bne.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001714:	d103      	bne.n	800171e <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8001716:	2000      	movs	r0, #0
 8001718:	4770      	bx	lr
 800171a:	2000      	movs	r0, #0
 800171c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800171e:	2003      	movs	r0, #3
 8001720:	4770      	bx	lr
  return HAL_OK;
 8001722:	2000      	movs	r0, #0
}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40007000 	.word	0x40007000
 800172c:	20000000 	.word	0x20000000
 8001730:	431bde83 	.word	0x431bde83

08001734 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001734:	b530      	push	{r4, r5, lr}
 8001736:	b083      	sub	sp, #12
 8001738:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001742:	d00b      	beq.n	800175c <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001744:	f7ff ffa6 	bl	8001694 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001748:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800174c:	d017      	beq.n	800177e <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800174e:	2c80      	cmp	r4, #128	; 0x80
 8001750:	d81f      	bhi.n	8001792 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001752:	d02d      	beq.n	80017b0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001754:	2c70      	cmp	r4, #112	; 0x70
 8001756:	d02d      	beq.n	80017b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001758:	2100      	movs	r1, #0
 800175a:	e01b      	b.n	8001794 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	4d17      	ldr	r5, [pc, #92]	; (80017bc <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800175e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	65ab      	str	r3, [r5, #88]	; 0x58
 8001766:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001770:	f7ff ff90 	bl	8001694 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001774:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177a:	65ab      	str	r3, [r5, #88]	; 0x58
 800177c:	e7e4      	b.n	8001748 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800177e:	2c80      	cmp	r4, #128	; 0x80
 8001780:	d903      	bls.n	800178a <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8001782:	2ca0      	cmp	r4, #160	; 0xa0
 8001784:	d903      	bls.n	800178e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001786:	2102      	movs	r1, #2
 8001788:	e004      	b.n	8001794 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800178a:	2100      	movs	r1, #0
 800178c:	e002      	b.n	8001794 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800178e:	2101      	movs	r1, #1
 8001790:	e000      	b.n	8001794 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001792:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001796:	6813      	ldr	r3, [r2, #0]
 8001798:	f023 0307 	bic.w	r3, r3, #7
 800179c:	430b      	orrs	r3, r1
 800179e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017a0:	6813      	ldr	r3, [r2, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	428b      	cmp	r3, r1
 80017a8:	d106      	bne.n	80017b8 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80017aa:	2000      	movs	r0, #0
}
 80017ac:	b003      	add	sp, #12
 80017ae:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80017b0:	2102      	movs	r1, #2
 80017b2:	e7ef      	b.n	8001794 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80017b4:	2101      	movs	r1, #1
 80017b6:	e7ed      	b.n	8001794 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80017b8:	2001      	movs	r0, #1
 80017ba:	e7f7      	b.n	80017ac <RCC_SetFlashLatencyFromMSIRange+0x78>
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c4:	4a28      	ldr	r2, [pc, #160]	; (8001868 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017c6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017c8:	68d2      	ldr	r2, [r2, #12]
 80017ca:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017ce:	f013 030c 	ands.w	r3, r3, #12
 80017d2:	d00a      	beq.n	80017ea <HAL_RCC_GetSysClockFreq+0x26>
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	d006      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d01f      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d020      	beq.n	8001822 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017e0:	2000      	movs	r0, #0
 80017e2:	4602      	mov	r2, r0
 80017e4:	e010      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017e6:	2a01      	cmp	r2, #1
 80017e8:	d1f6      	bne.n	80017d8 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017ea:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	f012 0f08 	tst.w	r2, #8
 80017f2:	d10c      	bne.n	800180e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017f4:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017f6:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80017fa:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 80017fe:	491b      	ldr	r1, [pc, #108]	; (800186c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001800:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001804:	b143      	cbz	r3, 8001818 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001806:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001808:	2b0c      	cmp	r3, #12
 800180a:	d00d      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x64>
}
 800180c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001816:	e7f2      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8001818:	4610      	mov	r0, r2
 800181a:	e7f5      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 800181c:	4814      	ldr	r0, [pc, #80]	; (8001870 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800181e:	2200      	movs	r2, #0
 8001820:	e7f2      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001824:	2200      	movs	r2, #0
 8001826:	e7ef      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_RCC_GetSysClockFreq+0xa4>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001830:	2b02      	cmp	r3, #2
 8001832:	d016      	beq.n	8001862 <HAL_RCC_GetSysClockFreq+0x9e>
 8001834:	2b03      	cmp	r3, #3
 8001836:	d100      	bne.n	800183a <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800183a:	490b      	ldr	r1, [pc, #44]	; (8001868 <HAL_RCC_GetSysClockFreq+0xa4>)
 800183c:	68c8      	ldr	r0, [r1, #12]
 800183e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001842:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001844:	68c8      	ldr	r0, [r1, #12]
 8001846:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800184a:	fb02 f000 	mul.w	r0, r2, r0
 800184e:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001852:	68cb      	ldr	r3, [r1, #12]
 8001854:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001858:	3301      	adds	r3, #1
 800185a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 800185c:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8001860:	e7d4      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8001862:	4a03      	ldr	r2, [pc, #12]	; (8001870 <HAL_RCC_GetSysClockFreq+0xac>)
 8001864:	e7e9      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x76>
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	08003640 	.word	0x08003640
 8001870:	00f42400 	.word	0x00f42400
 8001874:	007a1200 	.word	0x007a1200

08001878 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001878:	2800      	cmp	r0, #0
 800187a:	f000 82f1 	beq.w	8001e60 <HAL_RCC_OscConfig+0x5e8>
{
 800187e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001880:	b083      	sub	sp, #12
 8001882:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001884:	4b96      	ldr	r3, [pc, #600]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 8001886:	689d      	ldr	r5, [r3, #8]
 8001888:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800188c:	68de      	ldr	r6, [r3, #12]
 800188e:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001892:	6803      	ldr	r3, [r0, #0]
 8001894:	f013 0f10 	tst.w	r3, #16
 8001898:	d05a      	beq.n	8001950 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800189a:	b1e5      	cbz	r5, 80018d6 <HAL_RCC_OscConfig+0x5e>
 800189c:	2d0c      	cmp	r5, #12
 800189e:	d018      	beq.n	80018d2 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018a0:	69a3      	ldr	r3, [r4, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80bb 	beq.w	8001a1e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 80018a8:	4a8d      	ldr	r2, [pc, #564]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 80018aa:	6813      	ldr	r3, [r2, #0]
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80018b2:	f7ff f97b 	bl	8000bac <HAL_GetTick>
 80018b6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b8:	4b89      	ldr	r3, [pc, #548]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f013 0f02 	tst.w	r3, #2
 80018c0:	f040 809a 	bne.w	80019f8 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c4:	f7ff f972 	bl	8000bac <HAL_GetTick>
 80018c8:	1bc0      	subs	r0, r0, r7
 80018ca:	2802      	cmp	r0, #2
 80018cc:	d9f4      	bls.n	80018b8 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 80018ce:	2003      	movs	r0, #3
 80018d0:	e2d1      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018d2:	2e01      	cmp	r6, #1
 80018d4:	d1e4      	bne.n	80018a0 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018d6:	4b82      	ldr	r3, [pc, #520]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f013 0f02 	tst.w	r3, #2
 80018de:	d003      	beq.n	80018e8 <HAL_RCC_OscConfig+0x70>
 80018e0:	69a3      	ldr	r3, [r4, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 82be 	beq.w	8001e64 <HAL_RCC_OscConfig+0x5ec>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018e8:	6a20      	ldr	r0, [r4, #32]
 80018ea:	4b7d      	ldr	r3, [pc, #500]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f013 0f08 	tst.w	r3, #8
 80018f2:	d05b      	beq.n	80019ac <HAL_RCC_OscConfig+0x134>
 80018f4:	4b7a      	ldr	r3, [pc, #488]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018fc:	4298      	cmp	r0, r3
 80018fe:	d85c      	bhi.n	80019ba <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001900:	4b77      	ldr	r3, [pc, #476]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	f042 0208 	orr.w	r2, r2, #8
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001910:	6a21      	ldr	r1, [r4, #32]
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800191c:	69e1      	ldr	r1, [r4, #28]
 800191e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001922:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001924:	2d00      	cmp	r5, #0
 8001926:	d060      	beq.n	80019ea <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001928:	f7ff ff4c 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 800192c:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001934:	4a6b      	ldr	r2, [pc, #428]	; (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	40d8      	lsrs	r0, r3
 800193e:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001940:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001942:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_OscConfig+0x274>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	f7ff f8ef 	bl	8000b28 <HAL_InitTick>
        if(status != HAL_OK)
 800194a:	2800      	cmp	r0, #0
 800194c:	f040 8293 	bne.w	8001e76 <HAL_RCC_OscConfig+0x5fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	f013 0f01 	tst.w	r3, #1
 8001956:	f000 8081 	beq.w	8001a5c <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800195a:	2d08      	cmp	r5, #8
 800195c:	d075      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1d2>
 800195e:	2d0c      	cmp	r5, #12
 8001960:	d071      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	6863      	ldr	r3, [r4, #4]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001968:	f000 8097 	beq.w	8001a9a <HAL_RCC_OscConfig+0x222>
 800196c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001970:	f000 8099 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x22e>
 8001974:	4b5a      	ldr	r3, [pc, #360]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001984:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001986:	6863      	ldr	r3, [r4, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 8099 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 800198e:	f7ff f90d 	bl	8000bac <HAL_GetTick>
 8001992:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001994:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800199c:	d15e      	bne.n	8001a5c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199e:	f7ff f905 	bl	8000bac <HAL_GetTick>
 80019a2:	1bc0      	subs	r0, r0, r7
 80019a4:	2864      	cmp	r0, #100	; 0x64
 80019a6:	d9f5      	bls.n	8001994 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 80019a8:	2003      	movs	r0, #3
 80019aa:	e264      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ac:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 80019ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019b8:	e7a0      	b.n	80018fc <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ba:	f7ff febb 	bl	8001734 <RCC_SetFlashLatencyFromMSIRange>
 80019be:	2800      	cmp	r0, #0
 80019c0:	f040 8252 	bne.w	8001e68 <HAL_RCC_OscConfig+0x5f0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c4:	4b46      	ldr	r3, [pc, #280]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	f042 0208 	orr.w	r2, r2, #8
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019d4:	6a21      	ldr	r1, [r4, #32]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80019e0:	69e1      	ldr	r1, [r4, #28]
 80019e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	e79e      	b.n	8001928 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ea:	6a20      	ldr	r0, [r4, #32]
 80019ec:	f7ff fea2 	bl	8001734 <RCC_SetFlashLatencyFromMSIRange>
 80019f0:	2800      	cmp	r0, #0
 80019f2:	d099      	beq.n	8001928 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 80019f4:	2001      	movs	r0, #1
 80019f6:	e23e      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f8:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	f042 0208 	orr.w	r2, r2, #8
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a08:	6a21      	ldr	r1, [r4, #32]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001a14:	69e1      	ldr	r1, [r4, #28]
 8001a16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	e798      	b.n	8001950 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8001a1e:	4a30      	ldr	r2, [pc, #192]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 8001a20:	6813      	ldr	r3, [r2, #0]
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001a28:	f7ff f8c0 	bl	8000bac <HAL_GetTick>
 8001a2c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f013 0f02 	tst.w	r3, #2
 8001a36:	d08b      	beq.n	8001950 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a38:	f7ff f8b8 	bl	8000bac <HAL_GetTick>
 8001a3c:	1bc0      	subs	r0, r0, r7
 8001a3e:	2802      	cmp	r0, #2
 8001a40:	d9f5      	bls.n	8001a2e <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8001a42:	2003      	movs	r0, #3
 8001a44:	e217      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a46:	2e03      	cmp	r6, #3
 8001a48:	d18b      	bne.n	8001962 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a52:	d003      	beq.n	8001a5c <HAL_RCC_OscConfig+0x1e4>
 8001a54:	6863      	ldr	r3, [r4, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8208 	beq.w	8001e6c <HAL_RCC_OscConfig+0x5f4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	f013 0f02 	tst.w	r3, #2
 8001a62:	d058      	beq.n	8001b16 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a64:	2d04      	cmp	r5, #4
 8001a66:	d045      	beq.n	8001af4 <HAL_RCC_OscConfig+0x27c>
 8001a68:	2d0c      	cmp	r5, #12
 8001a6a:	d041      	beq.n	8001af0 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6c:	68e3      	ldr	r3, [r4, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d077      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8001a72:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 8001a74:	6813      	ldr	r3, [r2, #0]
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f896 	bl	8000bac <HAL_GetTick>
 8001a80:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a8a:	d161      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8c:	f7ff f88e 	bl	8000bac <HAL_GetTick>
 8001a90:	1b80      	subs	r0, r0, r6
 8001a92:	2802      	cmp	r0, #2
 8001a94:	d9f5      	bls.n	8001a82 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8001a96:	2003      	movs	r0, #3
 8001a98:	e1ed      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	e76f      	b.n	8001986 <HAL_RCC_OscConfig+0x10e>
 8001aa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001aaa:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e762      	b.n	8001986 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f874 	bl	8000bac <HAL_GetTick>
 8001ac4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_RCC_OscConfig+0x268>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ace:	d0c5      	beq.n	8001a5c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f86c 	bl	8000bac <HAL_GetTick>
 8001ad4:	1bc0      	subs	r0, r0, r7
 8001ad6:	2864      	cmp	r0, #100	; 0x64
 8001ad8:	d9f5      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8001ada:	2003      	movs	r0, #3
 8001adc:	e1cb      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	08003670 	.word	0x08003670
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000008 	.word	0x20000008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001af0:	2e02      	cmp	r6, #2
 8001af2:	d1bb      	bne.n	8001a6c <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af4:	4ba3      	ldr	r3, [pc, #652]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001afc:	d003      	beq.n	8001b06 <HAL_RCC_OscConfig+0x28e>
 8001afe:	68e3      	ldr	r3, [r4, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 81b5 	beq.w	8001e70 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b06:	4a9f      	ldr	r2, [pc, #636]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001b08:	6853      	ldr	r3, [r2, #4]
 8001b0a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001b0e:	6921      	ldr	r1, [r4, #16]
 8001b10:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001b14:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	f013 0f08 	tst.w	r3, #8
 8001b1c:	d04c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1e:	6963      	ldr	r3, [r4, #20]
 8001b20:	b39b      	cbz	r3, 8001b8a <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8001b22:	4a98      	ldr	r2, [pc, #608]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001b24:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001b30:	f7ff f83c 	bl	8000bac <HAL_GetTick>
 8001b34:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b36:	4b93      	ldr	r3, [pc, #588]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3c:	f013 0f02 	tst.w	r3, #2
 8001b40:	d13a      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b42:	f7ff f833 	bl	8000bac <HAL_GetTick>
 8001b46:	1b80      	subs	r0, r0, r6
 8001b48:	2802      	cmp	r0, #2
 8001b4a:	d9f4      	bls.n	8001b36 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	e192      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4a8c      	ldr	r2, [pc, #560]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001b52:	6853      	ldr	r3, [r2, #4]
 8001b54:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001b58:	6921      	ldr	r1, [r4, #16]
 8001b5a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001b5e:	6053      	str	r3, [r2, #4]
 8001b60:	e7d9      	b.n	8001b16 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8001b62:	4a88      	ldr	r2, [pc, #544]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001b64:	6813      	ldr	r3, [r2, #0]
 8001b66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f81e 	bl	8000bac <HAL_GetTick>
 8001b70:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b72:	4b84      	ldr	r3, [pc, #528]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001b7a:	d0cc      	beq.n	8001b16 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7c:	f7ff f816 	bl	8000bac <HAL_GetTick>
 8001b80:	1b80      	subs	r0, r0, r6
 8001b82:	2802      	cmp	r0, #2
 8001b84:	d9f5      	bls.n	8001b72 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8001b86:	2003      	movs	r0, #3
 8001b88:	e175      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_LSI_DISABLE();
 8001b8a:	4a7e      	ldr	r2, [pc, #504]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001b8c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001b98:	f7ff f808 	bl	8000bac <HAL_GetTick>
 8001b9c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b9e:	4b79      	ldr	r3, [pc, #484]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba4:	f013 0f02 	tst.w	r3, #2
 8001ba8:	d006      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001baa:	f7fe ffff 	bl	8000bac <HAL_GetTick>
 8001bae:	1b80      	subs	r0, r0, r6
 8001bb0:	2802      	cmp	r0, #2
 8001bb2:	d9f4      	bls.n	8001b9e <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	e15e      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	f013 0f04 	tst.w	r3, #4
 8001bbe:	d07a      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bc0:	4b70      	ldr	r3, [pc, #448]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001bc8:	d136      	bne.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b6e      	ldr	r3, [pc, #440]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001bcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bd2:	659a      	str	r2, [r3, #88]	; 0x58
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bde:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be0:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <HAL_RCC_OscConfig+0x510>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001be8:	d028      	beq.n	8001c3c <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bea:	68a3      	ldr	r3, [r4, #8]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d039      	beq.n	8001c64 <HAL_RCC_OscConfig+0x3ec>
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d03f      	beq.n	8001c74 <HAL_RCC_OscConfig+0x3fc>
 8001bf4:	4b63      	ldr	r3, [pc, #396]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001bf6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001c02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c06:	f022 0204 	bic.w	r2, r2, #4
 8001c0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0e:	68a3      	ldr	r3, [r4, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d03d      	beq.n	8001c90 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8001c14:	f7fe ffca 	bl	8000bac <HAL_GetTick>
 8001c18:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c1a:	4b5a      	ldr	r3, [pc, #360]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c20:	f013 0f02 	tst.w	r3, #2
 8001c24:	d146      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7fe ffc1 	bl	8000bac <HAL_GetTick>
 8001c2a:	1bc0      	subs	r0, r0, r7
 8001c2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c30:	4298      	cmp	r0, r3
 8001c32:	d9f2      	bls.n	8001c1a <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8001c34:	2003      	movs	r0, #3
 8001c36:	e11e      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
    FlagStatus       pwrclkchanged = RESET;
 8001c38:	2600      	movs	r6, #0
 8001c3a:	e7d1      	b.n	8001be0 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_RCC_OscConfig+0x510>)
 8001c3e:	6813      	ldr	r3, [r2, #0]
 8001c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c44:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001c46:	f7fe ffb1 	bl	8000bac <HAL_GetTick>
 8001c4a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4c:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <HAL_RCC_OscConfig+0x510>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c54:	d1c9      	bne.n	8001bea <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7fe ffa9 	bl	8000bac <HAL_GetTick>
 8001c5a:	1bc0      	subs	r0, r0, r7
 8001c5c:	2802      	cmp	r0, #2
 8001c5e:	d9f5      	bls.n	8001c4c <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8001c60:	2003      	movs	r0, #3
 8001c62:	e108      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c64:	4a47      	ldr	r2, [pc, #284]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001c66:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c72:	e7cc      	b.n	8001c0e <HAL_RCC_OscConfig+0x396>
 8001c74:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001c76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c7a:	f042 0204 	orr.w	r2, r2, #4
 8001c7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001c82:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001c8e:	e7be      	b.n	8001c0e <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8001c90:	f7fe ff8c 	bl	8000bac <HAL_GetTick>
 8001c94:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c96:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9c:	f013 0f02 	tst.w	r3, #2
 8001ca0:	d008      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7fe ff83 	bl	8000bac <HAL_GetTick>
 8001ca6:	1bc0      	subs	r0, r0, r7
 8001ca8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cac:	4298      	cmp	r0, r3
 8001cae:	d9f2      	bls.n	8001c96 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	e0e0      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
    if(pwrclkchanged == SET)
 8001cb4:	b9ee      	cbnz	r6, 8001cf2 <HAL_RCC_OscConfig+0x47a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80db 	beq.w	8001e74 <HAL_RCC_OscConfig+0x5fc>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d01d      	beq.n	8001cfe <HAL_RCC_OscConfig+0x486>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc2:	2d0c      	cmp	r5, #12
 8001cc4:	f000 80dd 	beq.w	8001e82 <HAL_RCC_OscConfig+0x60a>
        __HAL_RCC_PLL_DISABLE();
 8001cc8:	4a2e      	ldr	r2, [pc, #184]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001cca:	6813      	ldr	r3, [r2, #0]
 8001ccc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001cd2:	f7fe ff6b 	bl	8000bac <HAL_GetTick>
 8001cd6:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ce0:	f000 80b7 	beq.w	8001e52 <HAL_RCC_OscConfig+0x5da>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7fe ff62 	bl	8000bac <HAL_GetTick>
 8001ce8:	1b00      	subs	r0, r0, r4
 8001cea:	2802      	cmp	r0, #2
 8001cec:	d9f4      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8001cee:	2003      	movs	r0, #3
 8001cf0:	e0c1      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf2:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001cf4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfc:	e7db      	b.n	8001cb6 <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001d00:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	f003 0103 	and.w	r1, r3, #3
 8001d06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d08:	4291      	cmp	r1, r2
 8001d0a:	d00f      	beq.n	8001d2c <HAL_RCC_OscConfig+0x4b4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d0c:	2d0c      	cmp	r5, #12
 8001d0e:	f000 80b4 	beq.w	8001e7a <HAL_RCC_OscConfig+0x602>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001d1a:	f040 80b0 	bne.w	8001e7e <HAL_RCC_OscConfig+0x606>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001d26:	d031      	beq.n	8001d8c <HAL_RCC_OscConfig+0x514>
            return HAL_ERROR;
 8001d28:	2001      	movs	r0, #1
 8001d2a:	e0a4      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d30:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d32:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d34:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001d38:	d1e8      	bne.n	8001d0c <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d40:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001d44:	d1e2      	bne.n	8001d0c <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d46:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001d4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d4c:	3a07      	subs	r2, #7
 8001d4e:	bf18      	it	ne
 8001d50:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d52:	4291      	cmp	r1, r2
 8001d54:	d1da      	bne.n	8001d0c <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d56:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001d5a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d5c:	0852      	lsrs	r2, r2, #1
 8001d5e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d60:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001d64:	d1d2      	bne.n	8001d0c <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d66:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001d6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d6c:	0852      	lsrs	r2, r2, #1
 8001d6e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d70:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001d74:	d1ca      	bne.n	8001d0c <HAL_RCC_OscConfig+0x494>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d76:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_RCC_OscConfig+0x50c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d7e:	d04e      	beq.n	8001e1e <HAL_RCC_OscConfig+0x5a6>
  return HAL_OK;
 8001d80:	2000      	movs	r0, #0
 8001d82:	e078      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_DISABLE();
 8001d8c:	4a3e      	ldr	r2, [pc, #248]	; (8001e88 <HAL_RCC_OscConfig+0x610>)
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d94:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8001d96:	f7fe ff09 	bl	8000bac <HAL_GetTick>
 8001d9a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9c:	4b3a      	ldr	r3, [pc, #232]	; (8001e88 <HAL_RCC_OscConfig+0x610>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001da4:	d006      	beq.n	8001db4 <HAL_RCC_OscConfig+0x53c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da6:	f7fe ff01 	bl	8000bac <HAL_GetTick>
 8001daa:	1b40      	subs	r0, r0, r5
 8001dac:	2802      	cmp	r0, #2
 8001dae:	d9f5      	bls.n	8001d9c <HAL_RCC_OscConfig+0x524>
                return HAL_TIMEOUT;
 8001db0:	2003      	movs	r0, #3
 8001db2:	e060      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db4:	4a34      	ldr	r2, [pc, #208]	; (8001e88 <HAL_RCC_OscConfig+0x610>)
 8001db6:	68d3      	ldr	r3, [r2, #12]
 8001db8:	4934      	ldr	r1, [pc, #208]	; (8001e8c <HAL_RCC_OscConfig+0x614>)
 8001dba:	4019      	ands	r1, r3
 8001dbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dbe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001dc0:	3801      	subs	r0, #1
 8001dc2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001dc6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001dc8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001dcc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001dce:	0840      	lsrs	r0, r0, #1
 8001dd0:	3801      	subs	r0, #1
 8001dd2:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8001dd6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001dd8:	0840      	lsrs	r0, r0, #1
 8001dda:	3801      	subs	r0, #1
 8001ddc:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001de0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001de2:	0900      	lsrs	r0, r0, #4
 8001de4:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8001de8:	430b      	orrs	r3, r1
 8001dea:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8001dec:	6813      	ldr	r3, [r2, #0]
 8001dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df2:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df4:	68d3      	ldr	r3, [r2, #12]
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8001dfc:	f7fe fed6 	bl	8000bac <HAL_GetTick>
 8001e00:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <HAL_RCC_OscConfig+0x610>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x5a2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe fece 	bl	8000bac <HAL_GetTick>
 8001e10:	1b00      	subs	r0, r0, r4
 8001e12:	2802      	cmp	r0, #2
 8001e14:	d9f5      	bls.n	8001e02 <HAL_RCC_OscConfig+0x58a>
                return HAL_TIMEOUT;
 8001e16:	2003      	movs	r0, #3
 8001e18:	e02d      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	e02b      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
          __HAL_RCC_PLL_ENABLE();
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_RCC_OscConfig+0x610>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001e26:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001e2e:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8001e30:	f7fe febc 	bl	8000bac <HAL_GetTick>
 8001e34:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <HAL_RCC_OscConfig+0x610>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x5d6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe feb4 	bl	8000bac <HAL_GetTick>
 8001e44:	1b03      	subs	r3, r0, r4
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d9f5      	bls.n	8001e36 <HAL_RCC_OscConfig+0x5be>
              return HAL_TIMEOUT;
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	e013      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 8001e4e:	2000      	movs	r0, #0
 8001e50:	e011      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e52:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <HAL_RCC_OscConfig+0x610>)
 8001e54:	68d1      	ldr	r1, [r2, #12]
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_RCC_OscConfig+0x618>)
 8001e58:	400b      	ands	r3, r1
 8001e5a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
    return HAL_ERROR;
 8001e60:	2001      	movs	r0, #1
}
 8001e62:	4770      	bx	lr
        return HAL_ERROR;
 8001e64:	2001      	movs	r0, #1
 8001e66:	e006      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
            return HAL_ERROR;
 8001e68:	2001      	movs	r0, #1
 8001e6a:	e004      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	e002      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 8001e70:	2001      	movs	r0, #1
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 8001e74:	2000      	movs	r0, #0
}
 8001e76:	b003      	add	sp, #12
 8001e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	e7fb      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
            return HAL_ERROR;
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e7f9      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 8001e82:	2001      	movs	r0, #1
 8001e84:	e7f7      	b.n	8001e76 <HAL_RCC_OscConfig+0x5fe>
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	f99d808c 	.word	0xf99d808c
 8001e90:	feeefffc 	.word	0xfeeefffc

08001e94 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001e94:	2800      	cmp	r0, #0
 8001e96:	f000 80af 	beq.w	8001ff8 <HAL_RCC_ClockConfig+0x164>
{
 8001e9a:	b570      	push	{r4, r5, r6, lr}
 8001e9c:	460d      	mov	r5, r1
 8001e9e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCC_ClockConfig+0x174>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	d20b      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eac:	4a56      	ldr	r2, [pc, #344]	; (8002008 <HAL_RCC_ClockConfig+0x174>)
 8001eae:	6813      	ldr	r3, [r2, #0]
 8001eb0:	f023 0307 	bic.w	r3, r3, #7
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb8:	6813      	ldr	r3, [r2, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	428b      	cmp	r3, r1
 8001ec0:	f040 809c 	bne.w	8001ffc <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	f013 0f02 	tst.w	r3, #2
 8001eca:	d00c      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ecc:	68a2      	ldr	r2, [r4, #8]
 8001ece:	4b4f      	ldr	r3, [pc, #316]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d905      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eda:	494c      	ldr	r1, [pc, #304]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001edc:	688b      	ldr	r3, [r1, #8]
 8001ede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	f013 0f01 	tst.w	r3, #1
 8001eec:	d039      	beq.n	8001f62 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eee:	6863      	ldr	r3, [r4, #4]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d009      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d026      	beq.n	8001f46 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ef8:	bb63      	cbnz	r3, 8001f54 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001efa:	4a44      	ldr	r2, [pc, #272]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	f012 0f02 	tst.w	r2, #2
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8001f04:	2001      	movs	r0, #1
 8001f06:	e076      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f08:	4a40      	ldr	r2, [pc, #256]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001f10:	d076      	beq.n	8002000 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f12:	493e      	ldr	r1, [pc, #248]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001f14:	688a      	ldr	r2, [r1, #8]
 8001f16:	f022 0203 	bic.w	r2, r2, #3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001f1e:	f7fe fe45 	bl	8000bac <HAL_GetTick>
 8001f22:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f24:	4b39      	ldr	r3, [pc, #228]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	6862      	ldr	r2, [r4, #4]
 8001f2e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f32:	d016      	beq.n	8001f62 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f34:	f7fe fe3a 	bl	8000bac <HAL_GetTick>
 8001f38:	1b80      	subs	r0, r0, r6
 8001f3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f3e:	4298      	cmp	r0, r3
 8001f40:	d9f0      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8001f42:	2003      	movs	r0, #3
 8001f44:	e057      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f46:	4a31      	ldr	r2, [pc, #196]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001f4e:	d1e0      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8001f50:	2001      	movs	r0, #1
 8001f52:	e050      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f54:	4a2d      	ldr	r2, [pc, #180]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001f5c:	d1d9      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8001f5e:	2001      	movs	r0, #1
 8001f60:	e049      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	f013 0f02 	tst.w	r3, #2
 8001f68:	d00c      	beq.n	8001f84 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f6a:	68a2      	ldr	r2, [r4, #8]
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d205      	bcs.n	8001f84 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4924      	ldr	r1, [pc, #144]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001f7a:	688b      	ldr	r3, [r1, #8]
 8001f7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f80:	431a      	orrs	r2, r3
 8001f82:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f84:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_RCC_ClockConfig+0x174>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	42ab      	cmp	r3, r5
 8001f8e:	d90a      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f90:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <HAL_RCC_ClockConfig+0x174>)
 8001f92:	6813      	ldr	r3, [r2, #0]
 8001f94:	f023 0307 	bic.w	r3, r3, #7
 8001f98:	432b      	orrs	r3, r5
 8001f9a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9c:	6813      	ldr	r3, [r2, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	42ab      	cmp	r3, r5
 8001fa4:	d12e      	bne.n	8002004 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	f013 0f04 	tst.w	r3, #4
 8001fac:	d006      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fae:	4a17      	ldr	r2, [pc, #92]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001fb0:	6893      	ldr	r3, [r2, #8]
 8001fb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fb6:	68e1      	ldr	r1, [r4, #12]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	f013 0f08 	tst.w	r3, #8
 8001fc2:	d007      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001fc6:	6893      	ldr	r3, [r2, #8]
 8001fc8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001fcc:	6921      	ldr	r1, [r4, #16]
 8001fce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fd2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fd4:	f7ff fbf6 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_RCC_ClockConfig+0x178>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <HAL_RCC_ClockConfig+0x17c>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	40d8      	lsrs	r0, r3
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_RCC_ClockConfig+0x180>)
 8001fec:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	f7fe fd99 	bl	8000b28 <HAL_InitTick>
}
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001ff8:	2001      	movs	r0, #1
}
 8001ffa:	4770      	bx	lr
      return HAL_ERROR;
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	e7fa      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
 8002002:	e7f8      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 8002004:	2001      	movs	r0, #1
 8002006:	e7f6      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x162>
 8002008:	40022000 	.word	0x40022000
 800200c:	40021000 	.word	0x40021000
 8002010:	08003670 	.word	0x08003670
 8002014:	20000000 	.word	0x20000000
 8002018:	20000008 	.word	0x20000008

0800201c <HAL_RCC_GetHCLKFreq>:
}
 800201c:	4b01      	ldr	r3, [pc, #4]	; (8002024 <HAL_RCC_GetHCLKFreq+0x8>)
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000000 	.word	0x20000000

08002028 <HAL_RCC_GetPCLK1Freq>:
{
 8002028:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800202a:	f7ff fff7 	bl	800201c <HAL_RCC_GetHCLKFreq>
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002038:	5cd3      	ldrb	r3, [r2, r3]
 800203a:	f003 031f 	and.w	r3, r3, #31
}
 800203e:	40d8      	lsrs	r0, r3
 8002040:	bd08      	pop	{r3, pc}
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	08003680 	.word	0x08003680

0800204c <HAL_RCC_GetPCLK2Freq>:
{
 800204c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800204e:	f7ff ffe5 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_RCC_GetPCLK2Freq+0x20>)
 800205c:	5cd3      	ldrb	r3, [r2, r3]
 800205e:	f003 031f 	and.w	r3, r3, #31
}
 8002062:	40d8      	lsrs	r0, r3
 8002064:	bd08      	pop	{r3, pc}
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	08003680 	.word	0x08003680

08002070 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002072:	4604      	mov	r4, r0
 8002074:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002076:	4b59      	ldr	r3, [pc, #356]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f013 0f03 	tst.w	r3, #3
 800207e:	d018      	beq.n	80020b2 <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002080:	4b56      	ldr	r3, [pc, #344]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	6802      	ldr	r2, [r0, #0]
 800208a:	4293      	cmp	r3, r2
 800208c:	d002      	beq.n	8002094 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800208e:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8002090:	4628      	mov	r0, r5
 8002092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002094:	2a00      	cmp	r2, #0
 8002096:	f000 809e 	beq.w	80021d6 <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800209a:	4b50      	ldr	r3, [pc, #320]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80020a2:	3301      	adds	r3, #1
 80020a4:	6842      	ldr	r2, [r0, #4]
       ||
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d001      	beq.n	80020ae <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 80020aa:	2501      	movs	r5, #1
 80020ac:	e7f0      	b.n	8002090 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80020ae:	2500      	movs	r5, #0
 80020b0:	e009      	b.n	80020c6 <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 80020b2:	6803      	ldr	r3, [r0, #0]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d057      	beq.n	8002168 <RCCEx_PLLSAI1_Config+0xf8>
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d05c      	beq.n	8002176 <RCCEx_PLLSAI1_Config+0x106>
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d042      	beq.n	8002146 <RCCEx_PLLSAI1_Config+0xd6>
 80020c0:	2501      	movs	r5, #1
  if(status == HAL_OK)
 80020c2:	2d00      	cmp	r5, #0
 80020c4:	d1e4      	bne.n	8002090 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 80020c6:	4a45      	ldr	r2, [pc, #276]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 80020c8:	6813      	ldr	r3, [r2, #0]
 80020ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020ce:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80020d0:	f7fe fd6c 	bl	8000bac <HAL_GetTick>
 80020d4:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80020de:	d005      	beq.n	80020ec <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020e0:	f7fe fd64 	bl	8000bac <HAL_GetTick>
 80020e4:	1b83      	subs	r3, r0, r6
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d9f5      	bls.n	80020d6 <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 80020ea:	2503      	movs	r5, #3
    if(status == HAL_OK)
 80020ec:	2d00      	cmp	r5, #0
 80020ee:	d1cf      	bne.n	8002090 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80020f0:	2f00      	cmp	r7, #0
 80020f2:	d14e      	bne.n	8002192 <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020f4:	4939      	ldr	r1, [pc, #228]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 80020f6:	690b      	ldr	r3, [r1, #16]
 80020f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80020fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002100:	68a0      	ldr	r0, [r4, #8]
 8002102:	68e2      	ldr	r2, [r4, #12]
 8002104:	0912      	lsrs	r2, r2, #4
 8002106:	0452      	lsls	r2, r2, #17
 8002108:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800210c:	4313      	orrs	r3, r2
 800210e:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002110:	4a32      	ldr	r2, [pc, #200]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002118:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800211a:	f7fe fd47 	bl	8000bac <HAL_GetTick>
 800211e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002120:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002128:	d105      	bne.n	8002136 <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800212a:	f7fe fd3f 	bl	8000bac <HAL_GetTick>
 800212e:	1b83      	subs	r3, r0, r6
 8002130:	2b02      	cmp	r3, #2
 8002132:	d9f5      	bls.n	8002120 <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8002134:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8002136:	2d00      	cmp	r5, #0
 8002138:	d1aa      	bne.n	8002090 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800213a:	4a28      	ldr	r2, [pc, #160]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 800213c:	6913      	ldr	r3, [r2, #16]
 800213e:	69a1      	ldr	r1, [r4, #24]
 8002140:	430b      	orrs	r3, r1
 8002142:	6113      	str	r3, [r2, #16]
 8002144:	e7a4      	b.n	8002090 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002146:	4a25      	ldr	r2, [pc, #148]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	f012 0f02 	tst.w	r2, #2
 800214e:	d01e      	beq.n	800218e <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002150:	4822      	ldr	r0, [pc, #136]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 8002152:	68c2      	ldr	r2, [r0, #12]
 8002154:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002158:	6861      	ldr	r1, [r4, #4]
 800215a:	3901      	subs	r1, #1
 800215c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002160:	4313      	orrs	r3, r2
 8002162:	60c3      	str	r3, [r0, #12]
 8002164:	2500      	movs	r5, #0
 8002166:	e7ac      	b.n	80020c2 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002168:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002170:	d1ee      	bne.n	8002150 <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 8002172:	2501      	movs	r5, #1
 8002174:	e7a5      	b.n	80020c2 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002176:	4a19      	ldr	r2, [pc, #100]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800217e:	d1e7      	bne.n	8002150 <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002180:	4a16      	ldr	r2, [pc, #88]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002188:	d1e2      	bne.n	8002150 <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 800218a:	2501      	movs	r5, #1
 800218c:	e799      	b.n	80020c2 <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 800218e:	2501      	movs	r5, #1
 8002190:	e797      	b.n	80020c2 <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 8002192:	2f01      	cmp	r7, #1
 8002194:	d00f      	beq.n	80021b6 <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002196:	4811      	ldr	r0, [pc, #68]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 8002198:	6902      	ldr	r2, [r0, #16]
 800219a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800219e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80021a2:	68a1      	ldr	r1, [r4, #8]
 80021a4:	6963      	ldr	r3, [r4, #20]
 80021a6:	085b      	lsrs	r3, r3, #1
 80021a8:	3b01      	subs	r3, #1
 80021aa:	065b      	lsls	r3, r3, #25
 80021ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80021b0:	4313      	orrs	r3, r2
 80021b2:	6103      	str	r3, [r0, #16]
 80021b4:	e7ac      	b.n	8002110 <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021b6:	4809      	ldr	r0, [pc, #36]	; (80021dc <RCCEx_PLLSAI1_Config+0x16c>)
 80021b8:	6902      	ldr	r2, [r0, #16]
 80021ba:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80021be:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80021c2:	68a1      	ldr	r1, [r4, #8]
 80021c4:	6923      	ldr	r3, [r4, #16]
 80021c6:	085b      	lsrs	r3, r3, #1
 80021c8:	3b01      	subs	r3, #1
 80021ca:	055b      	lsls	r3, r3, #21
 80021cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80021d0:	4313      	orrs	r3, r2
 80021d2:	6103      	str	r3, [r0, #16]
 80021d4:	e79c      	b.n	8002110 <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 80021d6:	2501      	movs	r5, #1
 80021d8:	e75a      	b.n	8002090 <RCCEx_PLLSAI1_Config+0x20>
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000

080021e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80021e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e2:	4604      	mov	r4, r0
 80021e4:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021e6:	4b50      	ldr	r3, [pc, #320]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f013 0f03 	tst.w	r3, #3
 80021ee:	d018      	beq.n	8002222 <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80021f0:	4b4d      	ldr	r3, [pc, #308]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	6802      	ldr	r2, [r0, #0]
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d002      	beq.n	8002204 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80021fe:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8002200:	4628      	mov	r0, r5
 8002202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002204:	2a00      	cmp	r2, #0
 8002206:	f000 808c 	beq.w	8002322 <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800220a:	4b47      	ldr	r3, [pc, #284]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002212:	3301      	adds	r3, #1
 8002214:	6842      	ldr	r2, [r0, #4]
       ||
 8002216:	4293      	cmp	r3, r2
 8002218:	d001      	beq.n	800221e <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 800221a:	2501      	movs	r5, #1
 800221c:	e7f0      	b.n	8002200 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800221e:	2500      	movs	r5, #0
 8002220:	e009      	b.n	8002236 <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 8002222:	6803      	ldr	r3, [r0, #0]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d057      	beq.n	80022d8 <RCCEx_PLLSAI2_Config+0xf8>
 8002228:	2b03      	cmp	r3, #3
 800222a:	d05c      	beq.n	80022e6 <RCCEx_PLLSAI2_Config+0x106>
 800222c:	2b01      	cmp	r3, #1
 800222e:	d042      	beq.n	80022b6 <RCCEx_PLLSAI2_Config+0xd6>
 8002230:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8002232:	2d00      	cmp	r5, #0
 8002234:	d1e4      	bne.n	8002200 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8002236:	4a3c      	ldr	r2, [pc, #240]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 8002238:	6813      	ldr	r3, [r2, #0]
 800223a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002240:	f7fe fcb4 	bl	8000bac <HAL_GetTick>
 8002244:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002246:	4b38      	ldr	r3, [pc, #224]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800224e:	d005      	beq.n	800225c <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002250:	f7fe fcac 	bl	8000bac <HAL_GetTick>
 8002254:	1b83      	subs	r3, r0, r6
 8002256:	2b02      	cmp	r3, #2
 8002258:	d9f5      	bls.n	8002246 <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 800225a:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800225c:	2d00      	cmp	r5, #0
 800225e:	d1cf      	bne.n	8002200 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8002260:	2f00      	cmp	r7, #0
 8002262:	d14e      	bne.n	8002302 <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002264:	4930      	ldr	r1, [pc, #192]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 8002266:	694b      	ldr	r3, [r1, #20]
 8002268:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800226c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002270:	68a0      	ldr	r0, [r4, #8]
 8002272:	68e2      	ldr	r2, [r4, #12]
 8002274:	0912      	lsrs	r2, r2, #4
 8002276:	0452      	lsls	r2, r2, #17
 8002278:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800227c:	4313      	orrs	r3, r2
 800227e:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002280:	4a29      	ldr	r2, [pc, #164]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 8002282:	6813      	ldr	r3, [r2, #0]
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002288:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800228a:	f7fe fc8f 	bl	8000bac <HAL_GetTick>
 800228e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002298:	d105      	bne.n	80022a6 <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800229a:	f7fe fc87 	bl	8000bac <HAL_GetTick>
 800229e:	1b83      	subs	r3, r0, r6
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d9f5      	bls.n	8002290 <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 80022a4:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80022a6:	2d00      	cmp	r5, #0
 80022a8:	d1aa      	bne.n	8002200 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80022aa:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 80022ac:	6953      	ldr	r3, [r2, #20]
 80022ae:	6961      	ldr	r1, [r4, #20]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6153      	str	r3, [r2, #20]
 80022b4:	e7a4      	b.n	8002200 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	f012 0f02 	tst.w	r2, #2
 80022be:	d01e      	beq.n	80022fe <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022c0:	4819      	ldr	r0, [pc, #100]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 80022c2:	68c2      	ldr	r2, [r0, #12]
 80022c4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80022c8:	6861      	ldr	r1, [r4, #4]
 80022ca:	3901      	subs	r1, #1
 80022cc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60c3      	str	r3, [r0, #12]
 80022d4:	2500      	movs	r5, #0
 80022d6:	e7ac      	b.n	8002232 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022d8:	4a13      	ldr	r2, [pc, #76]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80022e0:	d1ee      	bne.n	80022c0 <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 80022e2:	2501      	movs	r5, #1
 80022e4:	e7a5      	b.n	8002232 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022e6:	4a10      	ldr	r2, [pc, #64]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80022ee:	d1e7      	bne.n	80022c0 <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80022f8:	d1e2      	bne.n	80022c0 <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 80022fa:	2501      	movs	r5, #1
 80022fc:	e799      	b.n	8002232 <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 80022fe:	2501      	movs	r5, #1
 8002300:	e797      	b.n	8002232 <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002302:	4809      	ldr	r0, [pc, #36]	; (8002328 <RCCEx_PLLSAI2_Config+0x148>)
 8002304:	6942      	ldr	r2, [r0, #20]
 8002306:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800230a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800230e:	68a1      	ldr	r1, [r4, #8]
 8002310:	6923      	ldr	r3, [r4, #16]
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	3b01      	subs	r3, #1
 8002316:	065b      	lsls	r3, r3, #25
 8002318:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800231c:	4313      	orrs	r3, r2
 800231e:	6143      	str	r3, [r0, #20]
 8002320:	e7ae      	b.n	8002280 <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 8002322:	2501      	movs	r5, #1
 8002324:	e76c      	b.n	8002200 <RCCEx_PLLSAI2_Config+0x20>
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000

0800232c <HAL_RCCEx_PeriphCLKConfig>:
{
 800232c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002334:	6803      	ldr	r3, [r0, #0]
 8002336:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800233a:	d033      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 800233c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800233e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002342:	d01f      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002344:	d80c      	bhi.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002346:	b323      	cbz	r3, 8002392 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234c:	d105      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800234e:	2100      	movs	r1, #0
 8002350:	3020      	adds	r0, #32
 8002352:	f7ff ff45 	bl	80021e0 <RCCEx_PLLSAI2_Config>
 8002356:	4606      	mov	r6, r0
      break;
 8002358:	e020      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 800235a:	2701      	movs	r7, #1
 800235c:	463e      	mov	r6, r7
 800235e:	e023      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002360:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002364:	d10b      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002366:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002368:	4a60      	ldr	r2, [pc, #384]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800236a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800236e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002372:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002374:	430b      	orrs	r3, r1
 8002376:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800237a:	2700      	movs	r7, #0
 800237c:	e014      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800237e:	2701      	movs	r7, #1
 8002380:	463e      	mov	r6, r7
 8002382:	e011      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002384:	4a59      	ldr	r2, [pc, #356]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002386:	68d3      	ldr	r3, [r2, #12]
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800238e:	2600      	movs	r6, #0
 8002390:	e7ea      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002392:	2100      	movs	r1, #0
 8002394:	3004      	adds	r0, #4
 8002396:	f7ff fe6b 	bl	8002070 <RCCEx_PLLSAI1_Config>
 800239a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800239c:	2e00      	cmp	r6, #0
 800239e:	d0e3      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80023a0:	4637      	mov	r7, r6
 80023a2:	e001      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023a4:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023a6:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80023ae:	d030      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 80023b0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80023b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023b6:	d01f      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80023b8:	d80d      	bhi.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80023ba:	b31b      	cbz	r3, 8002404 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80023bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c0:	d106      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023c2:	2100      	movs	r1, #0
 80023c4:	f104 0020 	add.w	r0, r4, #32
 80023c8:	f7ff ff0a 	bl	80021e0 <RCCEx_PLLSAI2_Config>
 80023cc:	4606      	mov	r6, r0
      break;
 80023ce:	e005      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 80023d0:	2701      	movs	r7, #1
 80023d2:	463e      	mov	r6, r7
 80023d4:	e01d      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 80023d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023da:	d10a      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 80023dc:	b9c6      	cbnz	r6, 8002410 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023de:	4a43      	ldr	r2, [pc, #268]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023e4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80023e8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80023ea:	430b      	orrs	r3, r1
 80023ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80023f0:	e00f      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 80023f2:	2701      	movs	r7, #1
 80023f4:	463e      	mov	r6, r7
 80023f6:	e00c      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023f8:	4a3c      	ldr	r2, [pc, #240]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023fa:	68d3      	ldr	r3, [r2, #12]
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	60d3      	str	r3, [r2, #12]
      break;
 8002402:	e7eb      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002404:	2100      	movs	r1, #0
 8002406:	1d20      	adds	r0, r4, #4
 8002408:	f7ff fe32 	bl	8002070 <RCCEx_PLLSAI1_Config>
 800240c:	4606      	mov	r6, r0
      break;
 800240e:	e7e5      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8002410:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002418:	d071      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800241a:	4b34      	ldr	r3, [pc, #208]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002422:	d14e      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002426:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002428:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800242c:	659a      	str	r2, [r3, #88]	; 0x58
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002438:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800243c:	4a2c      	ldr	r2, [pc, #176]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800243e:	6813      	ldr	r3, [r2, #0]
 8002440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002444:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002446:	f7fe fbb1 	bl	8000bac <HAL_GetTick>
 800244a:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800244c:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002454:	d105      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7fe fba9 	bl	8000bac <HAL_GetTick>
 800245a:	1b40      	subs	r0, r0, r5
 800245c:	2802      	cmp	r0, #2
 800245e:	d9f5      	bls.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8002460:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8002462:	2e00      	cmp	r6, #0
 8002464:	d146      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800246c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002470:	d016      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002472:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002476:	429a      	cmp	r2, r3
 8002478:	d012      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800247a:	4a1c      	ldr	r2, [pc, #112]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800247c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002484:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002488:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800248c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002490:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002494:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002498:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800249c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024a0:	f013 0f01 	tst.w	r3, #1
 80024a4:	d110      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 80024a6:	2e00      	cmp	r6, #0
 80024a8:	f040 8127 	bne.w	80026fa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ac:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80024ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80024b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80024ba:	430b      	orrs	r3, r1
 80024bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024c0:	e019      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 80024c2:	f04f 0800 	mov.w	r8, #0
 80024c6:	e7b9      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 80024c8:	f7fe fb70 	bl	8000bac <HAL_GetTick>
 80024cc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	f013 0f02 	tst.w	r3, #2
 80024d8:	d1e5      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fb67 	bl	8000bac <HAL_GetTick>
 80024de:	1b40      	subs	r0, r0, r5
 80024e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80024e4:	4298      	cmp	r0, r3
 80024e6:	d9f2      	bls.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 80024e8:	2603      	movs	r6, #3
 80024ea:	e7dc      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
      status = ret;
 80024f4:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 80024f6:	f1b8 0f00 	cmp.w	r8, #0
 80024fa:	f040 8100 	bne.w	80026fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	f013 0f01 	tst.w	r3, #1
 8002504:	d008      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002506:	4a9d      	ldr	r2, [pc, #628]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002508:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800250c:	f023 0303 	bic.w	r3, r3, #3
 8002510:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002512:	430b      	orrs	r3, r1
 8002514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	f013 0f02 	tst.w	r3, #2
 800251e:	d008      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002520:	4a96      	ldr	r2, [pc, #600]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002522:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002526:	f023 030c 	bic.w	r3, r3, #12
 800252a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800252c:	430b      	orrs	r3, r1
 800252e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	f013 0f04 	tst.w	r3, #4
 8002538:	d008      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800253a:	4a90      	ldr	r2, [pc, #576]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002540:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002544:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002546:	430b      	orrs	r3, r1
 8002548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	f013 0f08 	tst.w	r3, #8
 8002552:	d008      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002554:	4a89      	ldr	r2, [pc, #548]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002556:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800255a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800255e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002560:	430b      	orrs	r3, r1
 8002562:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	f013 0f10 	tst.w	r3, #16
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800256e:	4a83      	ldr	r2, [pc, #524]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002570:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002578:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800257a:	430b      	orrs	r3, r1
 800257c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	f013 0f20 	tst.w	r3, #32
 8002586:	d008      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002588:	4a7c      	ldr	r2, [pc, #496]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800258a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800258e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002592:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002594:	430b      	orrs	r3, r1
 8002596:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	f413 7f00 	tst.w	r3, #512	; 0x200
 80025a0:	d008      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025a2:	4a76      	ldr	r2, [pc, #472]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025a8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80025ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80025ae:	430b      	orrs	r3, r1
 80025b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80025ba:	d008      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025bc:	4a6f      	ldr	r2, [pc, #444]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025c2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80025c6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80025c8:	430b      	orrs	r3, r1
 80025ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80025d4:	d008      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d6:	4a69      	ldr	r2, [pc, #420]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025e0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80025e2:	430b      	orrs	r3, r1
 80025e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025ee:	d008      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f0:	4a62      	ldr	r2, [pc, #392]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80025fa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80025fc:	430b      	orrs	r3, r1
 80025fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002608:	d008      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800260a:	4a5c      	ldr	r2, [pc, #368]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800260c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002610:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002614:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002616:	430b      	orrs	r3, r1
 8002618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002622:	d00f      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002624:	4a55      	ldr	r2, [pc, #340]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002626:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800262a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800262e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002630:	430b      	orrs	r3, r1
 8002632:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002636:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800263c:	d065      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800263e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002642:	d067      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800264a:	d00f      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800264c:	4a4b      	ldr	r2, [pc, #300]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800264e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002652:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002656:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002658:	430b      	orrs	r3, r1
 800265a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800265e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002664:	d05e      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800266a:	d060      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002672:	d00f      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002674:	4a41      	ldr	r2, [pc, #260]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002676:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800267a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800267e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002680:	430b      	orrs	r3, r1
 8002682:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002686:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800268c:	d057      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800268e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002692:	d059      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800269a:	d00f      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800269c:	4a37      	ldr	r2, [pc, #220]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800269e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026a2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80026a6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80026a8:	430b      	orrs	r3, r1
 80026aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026ae:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80026b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026b4:	d050      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ba:	d055      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80026c2:	d008      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026c4:	4a2d      	ldr	r2, [pc, #180]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026ce:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80026d0:	430b      	orrs	r3, r1
 80026d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80026dc:	d009      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026de:	4a27      	ldr	r2, [pc, #156]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026e8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80026ec:	430b      	orrs	r3, r1
 80026ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80026f2:	4638      	mov	r0, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 80026fa:	4637      	mov	r7, r6
 80026fc:	e6fb      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fe:	4a1f      	ldr	r2, [pc, #124]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002700:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002706:	6593      	str	r3, [r2, #88]	; 0x58
 8002708:	e6f9      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270a:	68d3      	ldr	r3, [r2, #12]
 800270c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002710:	60d3      	str	r3, [r2, #12]
 8002712:	e797      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002714:	2101      	movs	r1, #1
 8002716:	1d20      	adds	r0, r4, #4
 8002718:	f7ff fcaa 	bl	8002070 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800271c:	2800      	cmp	r0, #0
 800271e:	d091      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 8002720:	4607      	mov	r7, r0
 8002722:	e78f      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002724:	68d3      	ldr	r3, [r2, #12]
 8002726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800272a:	60d3      	str	r3, [r2, #12]
 800272c:	e79e      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800272e:	2101      	movs	r1, #1
 8002730:	1d20      	adds	r0, r4, #4
 8002732:	f7ff fc9d 	bl	8002070 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002736:	2800      	cmp	r0, #0
 8002738:	d098      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 800273a:	4607      	mov	r7, r0
 800273c:	e796      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273e:	68d3      	ldr	r3, [r2, #12]
 8002740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002744:	60d3      	str	r3, [r2, #12]
 8002746:	e7a5      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002748:	2101      	movs	r1, #1
 800274a:	1d20      	adds	r0, r4, #4
 800274c:	f7ff fc90 	bl	8002070 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002750:	2800      	cmp	r0, #0
 8002752:	d09f      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 8002754:	4607      	mov	r7, r0
 8002756:	e79d      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002758:	2102      	movs	r1, #2
 800275a:	1d20      	adds	r0, r4, #4
 800275c:	f7ff fc88 	bl	8002070 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002760:	2800      	cmp	r0, #0
 8002762:	d0ab      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8002764:	4607      	mov	r7, r0
 8002766:	e7a9      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002768:	2102      	movs	r1, #2
 800276a:	f104 0020 	add.w	r0, r4, #32
 800276e:	f7ff fd37 	bl	80021e0 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8002772:	2800      	cmp	r0, #0
 8002774:	d0a2      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8002776:	4607      	mov	r7, r0
 8002778:	e7a0      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x390>
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000

08002780 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002780:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002782:	e852 3f00 	ldrex	r3, [r2]
 8002786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278a:	e842 3100 	strex	r1, r3, [r2]
 800278e:	2900      	cmp	r1, #0
 8002790:	d1f6      	bne.n	8002780 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002792:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002794:	f102 0308 	add.w	r3, r2, #8
 8002798:	e853 3f00 	ldrex	r3, [r3]
 800279c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	3208      	adds	r2, #8
 80027a2:	e842 3100 	strex	r1, r3, [r2]
 80027a6:	2900      	cmp	r1, #0
 80027a8:	d1f3      	bne.n	8002792 <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027aa:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d005      	beq.n	80027bc <UART_EndRxTransfer+0x3c>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b0:	2320      	movs	r3, #32
 80027b2:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b4:	2300      	movs	r3, #0
 80027b6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80027b8:	6643      	str	r3, [r0, #100]	; 0x64
}
 80027ba:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027bc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027be:	e852 3f00 	ldrex	r3, [r2]
 80027c2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c6:	e842 3100 	strex	r1, r3, [r2]
 80027ca:	2900      	cmp	r1, #0
 80027cc:	d1f6      	bne.n	80027bc <UART_EndRxTransfer+0x3c>
 80027ce:	e7ef      	b.n	80027b0 <UART_EndRxTransfer+0x30>

080027d0 <HAL_UART_TxCpltCallback>:
}
 80027d0:	4770      	bx	lr

080027d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027d2:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027d4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d6:	e852 3f00 	ldrex	r3, [r2]
 80027da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027de:	e842 3100 	strex	r1, r3, [r2]
 80027e2:	2900      	cmp	r1, #0
 80027e4:	d1f6      	bne.n	80027d4 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027e6:	2320      	movs	r3, #32
 80027e8:	6783      	str	r3, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	6683      	str	r3, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027ee:	f7ff ffef 	bl	80027d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027f2:	bd08      	pop	{r3, pc}

080027f4 <HAL_UART_ErrorCallback>:
}
 80027f4:	4770      	bx	lr

080027f6 <UART_DMAAbortOnError>:
{
 80027f6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80027f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002800:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002804:	f7ff fff6 	bl	80027f4 <HAL_UART_ErrorCallback>
}
 8002808:	bd08      	pop	{r3, pc}

0800280a <HAL_UARTEx_RxEventCallback>:
}
 800280a:	4770      	bx	lr

0800280c <HAL_UART_IRQHandler>:
{
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002810:	6801      	ldr	r1, [r0, #0]
 8002812:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002814:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002816:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002818:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 800281c:	401a      	ands	r2, r3
 800281e:	d105      	bne.n	800282c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002820:	f013 0f20 	tst.w	r3, #32
 8002824:	d002      	beq.n	800282c <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002826:	f010 0f20 	tst.w	r0, #32
 800282a:	d120      	bne.n	800286e <HAL_UART_IRQHandler+0x62>
  if ((errorflags != 0U)
 800282c:	b12a      	cbz	r2, 800283a <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800282e:	f015 0201 	ands.w	r2, r5, #1
 8002832:	d122      	bne.n	800287a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002834:	4eac      	ldr	r6, [pc, #688]	; (8002ae8 <HAL_UART_IRQHandler+0x2dc>)
 8002836:	4230      	tst	r0, r6
 8002838:	d11f      	bne.n	800287a <HAL_UART_IRQHandler+0x6e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800283a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800283c:	2a01      	cmp	r2, #1
 800283e:	f000 80ab 	beq.w	8002998 <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002842:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002846:	d003      	beq.n	8002850 <HAL_UART_IRQHandler+0x44>
 8002848:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800284c:	f040 8139 	bne.w	8002ac2 <HAL_UART_IRQHandler+0x2b6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002850:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002854:	d003      	beq.n	800285e <HAL_UART_IRQHandler+0x52>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002856:	f010 0f80 	tst.w	r0, #128	; 0x80
 800285a:	f040 8139 	bne.w	8002ad0 <HAL_UART_IRQHandler+0x2c4>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800285e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002862:	d003      	beq.n	800286c <HAL_UART_IRQHandler+0x60>
 8002864:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002868:	f040 8139 	bne.w	8002ade <HAL_UART_IRQHandler+0x2d2>
}
 800286c:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800286e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0fb      	beq.n	800286c <HAL_UART_IRQHandler+0x60>
        huart->RxISR(huart);
 8002874:	4620      	mov	r0, r4
 8002876:	4798      	blx	r3
      return;
 8002878:	e7f8      	b.n	800286c <HAL_UART_IRQHandler+0x60>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800287a:	f013 0f01 	tst.w	r3, #1
 800287e:	d009      	beq.n	8002894 <HAL_UART_IRQHandler+0x88>
 8002880:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002884:	d006      	beq.n	8002894 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002886:	2501      	movs	r5, #1
 8002888:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800288a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800288e:	4329      	orrs	r1, r5
 8002890:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002894:	f013 0f02 	tst.w	r3, #2
 8002898:	d009      	beq.n	80028ae <HAL_UART_IRQHandler+0xa2>
 800289a:	b142      	cbz	r2, 80028ae <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800289c:	6821      	ldr	r1, [r4, #0]
 800289e:	2502      	movs	r5, #2
 80028a0:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028a2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80028a6:	f041 0104 	orr.w	r1, r1, #4
 80028aa:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028ae:	f013 0f04 	tst.w	r3, #4
 80028b2:	d009      	beq.n	80028c8 <HAL_UART_IRQHandler+0xbc>
 80028b4:	b142      	cbz	r2, 80028c8 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028b6:	6821      	ldr	r1, [r4, #0]
 80028b8:	2504      	movs	r5, #4
 80028ba:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028bc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80028c0:	f041 0102 	orr.w	r1, r1, #2
 80028c4:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028c8:	f013 0f08 	tst.w	r3, #8
 80028cc:	d00b      	beq.n	80028e6 <HAL_UART_IRQHandler+0xda>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028ce:	f010 0f20 	tst.w	r0, #32
 80028d2:	d100      	bne.n	80028d6 <HAL_UART_IRQHandler+0xca>
 80028d4:	b13a      	cbz	r2, 80028e6 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028d6:	6822      	ldr	r2, [r4, #0]
 80028d8:	2108      	movs	r1, #8
 80028da:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028dc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80028e0:	430a      	orrs	r2, r1
 80028e2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028e6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80028ea:	d00c      	beq.n	8002906 <HAL_UART_IRQHandler+0xfa>
 80028ec:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80028f0:	d009      	beq.n	8002906 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028f8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028fa:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80028fe:	f042 0220 	orr.w	r2, r2, #32
 8002902:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002906:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800290a:	2a00      	cmp	r2, #0
 800290c:	d0ae      	beq.n	800286c <HAL_UART_IRQHandler+0x60>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800290e:	f013 0f20 	tst.w	r3, #32
 8002912:	d006      	beq.n	8002922 <HAL_UART_IRQHandler+0x116>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002914:	f010 0f20 	tst.w	r0, #32
 8002918:	d003      	beq.n	8002922 <HAL_UART_IRQHandler+0x116>
        if (huart->RxISR != NULL)
 800291a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800291c:	b10b      	cbz	r3, 8002922 <HAL_UART_IRQHandler+0x116>
          huart->RxISR(huart);
 800291e:	4620      	mov	r0, r4
 8002920:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8002922:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800292e:	d102      	bne.n	8002936 <HAL_UART_IRQHandler+0x12a>
 8002930:	f012 0f28 	tst.w	r2, #40	; 0x28
 8002934:	d029      	beq.n	800298a <HAL_UART_IRQHandler+0x17e>
        UART_EndRxTransfer(huart);
 8002936:	4620      	mov	r0, r4
 8002938:	f7ff ff22 	bl	8002780 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002944:	d01d      	beq.n	8002982 <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002946:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002948:	f102 0308 	add.w	r3, r2, #8
 800294c:	e853 3f00 	ldrex	r3, [r3]
 8002950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002954:	3208      	adds	r2, #8
 8002956:	e842 3100 	strex	r1, r3, [r2]
 800295a:	2900      	cmp	r1, #0
 800295c:	d1f3      	bne.n	8002946 <HAL_UART_IRQHandler+0x13a>
          if (huart->hdmarx != NULL)
 800295e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002960:	b15b      	cbz	r3, 800297a <HAL_UART_IRQHandler+0x16e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002962:	4a62      	ldr	r2, [pc, #392]	; (8002aec <HAL_UART_IRQHandler+0x2e0>)
 8002964:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002966:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002968:	f7fe fd6b 	bl	8001442 <HAL_DMA_Abort_IT>
 800296c:	2800      	cmp	r0, #0
 800296e:	f43f af7d 	beq.w	800286c <HAL_UART_IRQHandler+0x60>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002972:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002974:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002976:	4798      	blx	r3
 8002978:	e778      	b.n	800286c <HAL_UART_IRQHandler+0x60>
            HAL_UART_ErrorCallback(huart);
 800297a:	4620      	mov	r0, r4
 800297c:	f7ff ff3a 	bl	80027f4 <HAL_UART_ErrorCallback>
 8002980:	e774      	b.n	800286c <HAL_UART_IRQHandler+0x60>
          HAL_UART_ErrorCallback(huart);
 8002982:	4620      	mov	r0, r4
 8002984:	f7ff ff36 	bl	80027f4 <HAL_UART_ErrorCallback>
 8002988:	e770      	b.n	800286c <HAL_UART_IRQHandler+0x60>
        HAL_UART_ErrorCallback(huart);
 800298a:	4620      	mov	r0, r4
 800298c:	f7ff ff32 	bl	80027f4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return;
 8002996:	e769      	b.n	800286c <HAL_UART_IRQHandler+0x60>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002998:	f013 0f10 	tst.w	r3, #16
 800299c:	f43f af51 	beq.w	8002842 <HAL_UART_IRQHandler+0x36>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80029a0:	f010 0f10 	tst.w	r0, #16
 80029a4:	f43f af4d 	beq.w	8002842 <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029a8:	2310      	movs	r3, #16
 80029aa:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80029b4:	d04e      	beq.n	8002a54 <HAL_UART_IRQHandler+0x248>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029b6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80029b8:	6813      	ldr	r3, [r2, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f43f af54 	beq.w	800286c <HAL_UART_IRQHandler+0x60>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029c4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80029c8:	4299      	cmp	r1, r3
 80029ca:	f67f af4f 	bls.w	800286c <HAL_UART_IRQHandler+0x60>
        huart->RxXferCount = nb_remaining_rx_data;
 80029ce:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80029d2:	6813      	ldr	r3, [r2, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f013 0f20 	tst.w	r3, #32
 80029da:	d130      	bne.n	8002a3e <HAL_UART_IRQHandler+0x232>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029de:	e852 3f00 	ldrex	r3, [r2]
 80029e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	e842 3100 	strex	r1, r3, [r2]
 80029ea:	2900      	cmp	r1, #0
 80029ec:	d1f6      	bne.n	80029dc <HAL_UART_IRQHandler+0x1d0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f0:	f102 0308 	add.w	r3, r2, #8
 80029f4:	e853 3f00 	ldrex	r3, [r3]
 80029f8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fc:	3208      	adds	r2, #8
 80029fe:	e842 3100 	strex	r1, r3, [r2]
 8002a02:	2900      	cmp	r1, #0
 8002a04:	d1f3      	bne.n	80029ee <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a06:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a08:	f102 0308 	add.w	r3, r2, #8
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	3208      	adds	r2, #8
 8002a16:	e842 3100 	strex	r1, r3, [r2]
 8002a1a:	2900      	cmp	r1, #0
 8002a1c:	d1f3      	bne.n	8002a06 <HAL_UART_IRQHandler+0x1fa>
          huart->RxState = HAL_UART_STATE_READY;
 8002a1e:	2320      	movs	r3, #32
 8002a20:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a22:	2300      	movs	r3, #0
 8002a24:	6623      	str	r3, [r4, #96]	; 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a26:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a28:	e852 3f00 	ldrex	r3, [r2]
 8002a2c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a30:	e842 3100 	strex	r1, r3, [r2]
 8002a34:	2900      	cmp	r1, #0
 8002a36:	d1f6      	bne.n	8002a26 <HAL_UART_IRQHandler+0x21a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a38:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002a3a:	f7fe fcdd 	bl	80013f8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a3e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8002a42:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	1ac9      	subs	r1, r1, r3
 8002a4a:	b289      	uxth	r1, r1
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7ff fedc 	bl	800280a <HAL_UARTEx_RxEventCallback>
      return;
 8002a52:	e70b      	b.n	800286c <HAL_UART_IRQHandler+0x60>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a54:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8002a58:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	1ac9      	subs	r1, r1, r3
 8002a60:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002a62:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f43f aeff 	beq.w	800286c <HAL_UART_IRQHandler+0x60>
          && (nb_rx_data > 0U))
 8002a6e:	2900      	cmp	r1, #0
 8002a70:	f43f aefc 	beq.w	800286c <HAL_UART_IRQHandler+0x60>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a74:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a76:	e852 3f00 	ldrex	r3, [r2]
 8002a7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7e:	e842 3000 	strex	r0, r3, [r2]
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d1f6      	bne.n	8002a74 <HAL_UART_IRQHandler+0x268>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a86:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a88:	f102 0308 	add.w	r3, r2, #8
 8002a8c:	e853 3f00 	ldrex	r3, [r3]
 8002a90:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a94:	3208      	adds	r2, #8
 8002a96:	e842 3000 	strex	r0, r3, [r2]
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	d1f3      	bne.n	8002a86 <HAL_UART_IRQHandler+0x27a>
        huart->RxState = HAL_UART_STATE_READY;
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	6623      	str	r3, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8002aa6:	6663      	str	r3, [r4, #100]	; 0x64
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aaa:	e852 3f00 	ldrex	r3, [r2]
 8002aae:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab2:	e842 3000 	strex	r0, r3, [r2]
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d1f6      	bne.n	8002aa8 <HAL_UART_IRQHandler+0x29c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff fea5 	bl	800280a <HAL_UARTEx_RxEventCallback>
      return;
 8002ac0:	e6d4      	b.n	800286c <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ac2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ac6:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f000 fc93 	bl	80033f4 <HAL_UARTEx_WakeupCallback>
    return;
 8002ace:	e6cd      	b.n	800286c <HAL_UART_IRQHandler+0x60>
    if (huart->TxISR != NULL)
 8002ad0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f43f aeca 	beq.w	800286c <HAL_UART_IRQHandler+0x60>
      huart->TxISR(huart);
 8002ad8:	4620      	mov	r0, r4
 8002ada:	4798      	blx	r3
    return;
 8002adc:	e6c6      	b.n	800286c <HAL_UART_IRQHandler+0x60>
    UART_EndTransmit_IT(huart);
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff fe77 	bl	80027d2 <UART_EndTransmit_IT>
    return;
 8002ae4:	e6c2      	b.n	800286c <HAL_UART_IRQHandler+0x60>
 8002ae6:	bf00      	nop
 8002ae8:	04000120 	.word	0x04000120
 8002aec:	080027f7 	.word	0x080027f7

08002af0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002af0:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8002af2:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002af6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8002af8:	2a22      	cmp	r2, #34	; 0x22
 8002afa:	d006      	beq.n	8002b0a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002afc:	6802      	ldr	r2, [r0, #0]
 8002afe:	8b13      	ldrh	r3, [r2, #24]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f043 0308 	orr.w	r3, r3, #8
 8002b06:	8313      	strh	r3, [r2, #24]
  }
}
 8002b08:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b0a:	6802      	ldr	r2, [r0, #0]
 8002b0c:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002b12:	400b      	ands	r3, r1
 8002b14:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8002b16:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002b18:	3301      	adds	r3, #1
 8002b1a:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002b1c:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8002b2a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e9      	bne.n	8002b08 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b34:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	e852 3f00 	ldrex	r3, [r2]
 8002b3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	e842 3100 	strex	r1, r3, [r2]
 8002b42:	2900      	cmp	r1, #0
 8002b44:	d1f6      	bne.n	8002b34 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b46:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	f102 0308 	add.w	r3, r2, #8
 8002b4c:	e853 3f00 	ldrex	r3, [r3]
 8002b50:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	3208      	adds	r2, #8
 8002b56:	e842 3100 	strex	r1, r3, [r2]
 8002b5a:	2900      	cmp	r1, #0
 8002b5c:	d1f3      	bne.n	8002b46 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b66:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d116      	bne.n	8002b9a <UART_RxISR_8BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	6603      	str	r3, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b70:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b72:	e852 3f00 	ldrex	r3, [r2]
 8002b76:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7a:	e842 3100 	strex	r1, r3, [r2]
 8002b7e:	2900      	cmp	r1, #0
 8002b80:	d1f6      	bne.n	8002b70 <UART_RxISR_8BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002b82:	6803      	ldr	r3, [r0, #0]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	f012 0f10 	tst.w	r2, #16
 8002b8a:	d001      	beq.n	8002b90 <UART_RxISR_8BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b90:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8002b94:	f7ff fe39 	bl	800280a <HAL_UARTEx_RxEventCallback>
 8002b98:	e7b6      	b.n	8002b08 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8002b9a:	f7fd fdb1 	bl	8000700 <HAL_UART_RxCpltCallback>
 8002b9e:	e7b3      	b.n	8002b08 <UART_RxISR_8BIT+0x18>

08002ba0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002ba0:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002ba2:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ba6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8002ba8:	2a22      	cmp	r2, #34	; 0x22
 8002baa:	d006      	beq.n	8002bba <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002bac:	6802      	ldr	r2, [r0, #0]
 8002bae:	8b13      	ldrh	r3, [r2, #24]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f043 0308 	orr.w	r3, r3, #8
 8002bb6:	8313      	strh	r3, [r2, #24]
  }
}
 8002bb8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002bba:	6802      	ldr	r2, [r0, #0]
 8002bbc:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002bbe:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8002bc4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002bca:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8002bd8:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1ea      	bne.n	8002bb8 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be4:	e852 3f00 	ldrex	r3, [r2]
 8002be8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bec:	e842 3100 	strex	r1, r3, [r2]
 8002bf0:	2900      	cmp	r1, #0
 8002bf2:	d1f6      	bne.n	8002be2 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf6:	f102 0308 	add.w	r3, r2, #8
 8002bfa:	e853 3f00 	ldrex	r3, [r3]
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c02:	3208      	adds	r2, #8
 8002c04:	e842 3100 	strex	r1, r3, [r2]
 8002c08:	2900      	cmp	r1, #0
 8002c0a:	d1f3      	bne.n	8002bf4 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c14:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d116      	bne.n	8002c48 <UART_RxISR_16BIT+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	6603      	str	r3, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c1e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	e852 3f00 	ldrex	r3, [r2]
 8002c24:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	e842 3100 	strex	r1, r3, [r2]
 8002c2c:	2900      	cmp	r1, #0
 8002c2e:	d1f6      	bne.n	8002c1e <UART_RxISR_16BIT+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002c30:	6803      	ldr	r3, [r0, #0]
 8002c32:	69da      	ldr	r2, [r3, #28]
 8002c34:	f012 0f10 	tst.w	r2, #16
 8002c38:	d001      	beq.n	8002c3e <UART_RxISR_16BIT+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c3a:	2210      	movs	r2, #16
 8002c3c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c3e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8002c42:	f7ff fde2 	bl	800280a <HAL_UARTEx_RxEventCallback>
 8002c46:	e7b7      	b.n	8002bb8 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8002c48:	f7fd fd5a 	bl	8000700 <HAL_UART_RxCpltCallback>
 8002c4c:	e7b4      	b.n	8002bb8 <UART_RxISR_16BIT+0x18>
	...

08002c50 <UART_SetConfig>:
{
 8002c50:	b510      	push	{r4, lr}
 8002c52:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c54:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c56:	6883      	ldr	r3, [r0, #8]
 8002c58:	6902      	ldr	r2, [r0, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	6942      	ldr	r2, [r0, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	69c2      	ldr	r2, [r0, #28]
 8002c62:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c64:	6808      	ldr	r0, [r1, #0]
 8002c66:	4a8e      	ldr	r2, [pc, #568]	; (8002ea0 <UART_SetConfig+0x250>)
 8002c68:	4002      	ands	r2, r0
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	6853      	ldr	r3, [r2, #4]
 8002c72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c76:	68e1      	ldr	r1, [r4, #12]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c7c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c7e:	6822      	ldr	r2, [r4, #0]
 8002c80:	4b88      	ldr	r3, [pc, #544]	; (8002ea4 <UART_SetConfig+0x254>)
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d001      	beq.n	8002c8a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8002c86:	6a23      	ldr	r3, [r4, #32]
 8002c88:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c8a:	6893      	ldr	r3, [r2, #8]
 8002c8c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	4a84      	ldr	r2, [pc, #528]	; (8002ea8 <UART_SetConfig+0x258>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d010      	beq.n	8002cbe <UART_SetConfig+0x6e>
 8002c9c:	4a83      	ldr	r2, [pc, #524]	; (8002eac <UART_SetConfig+0x25c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d021      	beq.n	8002ce6 <UART_SetConfig+0x96>
 8002ca2:	4a83      	ldr	r2, [pc, #524]	; (8002eb0 <UART_SetConfig+0x260>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d037      	beq.n	8002d18 <UART_SetConfig+0xc8>
 8002ca8:	4a82      	ldr	r2, [pc, #520]	; (8002eb4 <UART_SetConfig+0x264>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d05c      	beq.n	8002d68 <UART_SetConfig+0x118>
 8002cae:	4a82      	ldr	r2, [pc, #520]	; (8002eb8 <UART_SetConfig+0x268>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d06b      	beq.n	8002d8c <UART_SetConfig+0x13c>
 8002cb4:	4a7b      	ldr	r2, [pc, #492]	; (8002ea4 <UART_SetConfig+0x254>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d07d      	beq.n	8002db6 <UART_SetConfig+0x166>
 8002cba:	2210      	movs	r2, #16
 8002cbc:	e03a      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002cbe:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002cc2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	2a03      	cmp	r2, #3
 8002ccc:	d809      	bhi.n	8002ce2 <UART_SetConfig+0x92>
 8002cce:	e8df f002 	tbb	[pc, r2]
 8002cd2:	0402      	.short	0x0402
 8002cd4:	0687      	.short	0x0687
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	e02c      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002cda:	2204      	movs	r2, #4
 8002cdc:	e02a      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002cde:	2208      	movs	r2, #8
 8002ce0:	e028      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002ce2:	2210      	movs	r2, #16
 8002ce4:	e026      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002ce6:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002cea:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002cee:	f002 020c 	and.w	r2, r2, #12
 8002cf2:	2a0c      	cmp	r2, #12
 8002cf4:	d80e      	bhi.n	8002d14 <UART_SetConfig+0xc4>
 8002cf6:	e8df f002 	tbb	[pc, r2]
 8002cfa:	0d07      	.short	0x0d07
 8002cfc:	0d090d0d 	.word	0x0d090d0d
 8002d00:	0d750d0d 	.word	0x0d750d0d
 8002d04:	0d0d      	.short	0x0d0d
 8002d06:	0b          	.byte	0x0b
 8002d07:	00          	.byte	0x00
 8002d08:	2200      	movs	r2, #0
 8002d0a:	e013      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	e011      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002d10:	2208      	movs	r2, #8
 8002d12:	e00f      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002d14:	2210      	movs	r2, #16
 8002d16:	e00d      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002d18:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8002d1c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002d20:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002d24:	2a20      	cmp	r2, #32
 8002d26:	d05f      	beq.n	8002de8 <UART_SetConfig+0x198>
 8002d28:	d81a      	bhi.n	8002d60 <UART_SetConfig+0x110>
 8002d2a:	2a00      	cmp	r2, #0
 8002d2c:	d05e      	beq.n	8002dec <UART_SetConfig+0x19c>
 8002d2e:	2a10      	cmp	r2, #16
 8002d30:	d15e      	bne.n	8002df0 <UART_SetConfig+0x1a0>
 8002d32:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d34:	495b      	ldr	r1, [pc, #364]	; (8002ea4 <UART_SetConfig+0x254>)
 8002d36:	428b      	cmp	r3, r1
 8002d38:	d076      	beq.n	8002e28 <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d3a:	69e0      	ldr	r0, [r4, #28]
 8002d3c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d40:	f000 80a3 	beq.w	8002e8a <UART_SetConfig+0x23a>
    switch (clocksource)
 8002d44:	2a08      	cmp	r2, #8
 8002d46:	f200 810e 	bhi.w	8002f66 <UART_SetConfig+0x316>
 8002d4a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002d4e:	00dd      	.short	0x00dd
 8002d50:	00db00f3 	.word	0x00db00f3
 8002d54:	00f6010c 	.word	0x00f6010c
 8002d58:	010c010c 	.word	0x010c010c
 8002d5c:	00f9010c 	.word	0x00f9010c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d60:	2a30      	cmp	r2, #48	; 0x30
 8002d62:	d147      	bne.n	8002df4 <UART_SetConfig+0x1a4>
 8002d64:	2208      	movs	r2, #8
 8002d66:	e7e5      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002d68:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002d6c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002d70:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002d74:	2a80      	cmp	r2, #128	; 0x80
 8002d76:	d03f      	beq.n	8002df8 <UART_SetConfig+0x1a8>
 8002d78:	d804      	bhi.n	8002d84 <UART_SetConfig+0x134>
 8002d7a:	b3fa      	cbz	r2, 8002dfc <UART_SetConfig+0x1ac>
 8002d7c:	2a40      	cmp	r2, #64	; 0x40
 8002d7e:	d13f      	bne.n	8002e00 <UART_SetConfig+0x1b0>
 8002d80:	2204      	movs	r2, #4
 8002d82:	e7d7      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002d84:	2ac0      	cmp	r2, #192	; 0xc0
 8002d86:	d13d      	bne.n	8002e04 <UART_SetConfig+0x1b4>
 8002d88:	2208      	movs	r2, #8
 8002d8a:	e7d3      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002d8c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002d90:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002d94:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002d98:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002d9c:	d034      	beq.n	8002e08 <UART_SetConfig+0x1b8>
 8002d9e:	d805      	bhi.n	8002dac <UART_SetConfig+0x15c>
 8002da0:	b3a2      	cbz	r2, 8002e0c <UART_SetConfig+0x1bc>
 8002da2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002da6:	d133      	bne.n	8002e10 <UART_SetConfig+0x1c0>
 8002da8:	2204      	movs	r2, #4
 8002daa:	e7c3      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002dac:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002db0:	d130      	bne.n	8002e14 <UART_SetConfig+0x1c4>
 8002db2:	2208      	movs	r2, #8
 8002db4:	e7be      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002db6:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8002dba:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002dbe:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002dc2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002dc6:	d027      	beq.n	8002e18 <UART_SetConfig+0x1c8>
 8002dc8:	d805      	bhi.n	8002dd6 <UART_SetConfig+0x186>
 8002dca:	b33a      	cbz	r2, 8002e1c <UART_SetConfig+0x1cc>
 8002dcc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002dd0:	d126      	bne.n	8002e20 <UART_SetConfig+0x1d0>
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	e7ae      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002dd6:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002dda:	d123      	bne.n	8002e24 <UART_SetConfig+0x1d4>
 8002ddc:	2208      	movs	r2, #8
 8002dde:	e7a9      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002de0:	2202      	movs	r2, #2
 8002de2:	e7a7      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002de4:	2202      	movs	r2, #2
 8002de6:	e7a5      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002de8:	2202      	movs	r2, #2
 8002dea:	e7a3      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002dec:	2200      	movs	r2, #0
 8002dee:	e7a1      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002df0:	2210      	movs	r2, #16
 8002df2:	e79f      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002df4:	2210      	movs	r2, #16
 8002df6:	e79d      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002df8:	2202      	movs	r2, #2
 8002dfa:	e79b      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	e799      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002e00:	2210      	movs	r2, #16
 8002e02:	e797      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002e04:	2210      	movs	r2, #16
 8002e06:	e795      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002e08:	2202      	movs	r2, #2
 8002e0a:	e793      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	e791      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002e10:	2210      	movs	r2, #16
 8002e12:	e78f      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002e14:	2210      	movs	r2, #16
 8002e16:	e78d      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002e18:	2202      	movs	r2, #2
 8002e1a:	e78b      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	e789      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002e20:	2210      	movs	r2, #16
 8002e22:	e787      	b.n	8002d34 <UART_SetConfig+0xe4>
 8002e24:	2210      	movs	r2, #16
 8002e26:	e785      	b.n	8002d34 <UART_SetConfig+0xe4>
    switch (clocksource)
 8002e28:	2a08      	cmp	r2, #8
 8002e2a:	f200 808c 	bhi.w	8002f46 <UART_SetConfig+0x2f6>
 8002e2e:	e8df f002 	tbb	[pc, r2]
 8002e32:	8a08      	.short	0x8a08
 8002e34:	8a278a2a 	.word	0x8a278a2a
 8002e38:	8a8a      	.short	0x8a8a
 8002e3a:	05          	.byte	0x05
 8002e3b:	00          	.byte	0x00
 8002e3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e40:	e003      	b.n	8002e4a <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e42:	f7ff f8f1 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002e46:	2800      	cmp	r0, #0
 8002e48:	d07f      	beq.n	8002f4a <UART_SetConfig+0x2fa>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e4a:	6862      	ldr	r2, [r4, #4]
 8002e4c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002e50:	4283      	cmp	r3, r0
 8002e52:	d87c      	bhi.n	8002f4e <UART_SetConfig+0x2fe>
 8002e54:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002e58:	d87b      	bhi.n	8002f52 <UART_SetConfig+0x302>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e5a:	0e01      	lsrs	r1, r0, #24
 8002e5c:	0200      	lsls	r0, r0, #8
 8002e5e:	0853      	lsrs	r3, r2, #1
 8002e60:	18c0      	adds	r0, r0, r3
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	f141 0100 	adc.w	r1, r1, #0
 8002e6a:	f7fd f9ad 	bl	80001c8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e6e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <UART_SetConfig+0x26c>)
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d86e      	bhi.n	8002f56 <UART_SetConfig+0x306>
          huart->Instance->BRR = usartdiv;
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	60d8      	str	r0, [r3, #12]
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	e055      	b.n	8002f2c <UART_SetConfig+0x2dc>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e80:	f7fe fca0 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
        break;
 8002e84:	e7df      	b.n	8002e46 <UART_SetConfig+0x1f6>
        pclk = (uint32_t) HSI_VALUE;
 8002e86:	480e      	ldr	r0, [pc, #56]	; (8002ec0 <UART_SetConfig+0x270>)
 8002e88:	e7df      	b.n	8002e4a <UART_SetConfig+0x1fa>
    switch (clocksource)
 8002e8a:	2a08      	cmp	r2, #8
 8002e8c:	d865      	bhi.n	8002f5a <UART_SetConfig+0x30a>
 8002e8e:	e8df f002 	tbb	[pc, r2]
 8002e92:	3319      	.short	0x3319
 8002e94:	64366405 	.word	0x64366405
 8002e98:	6464      	.short	0x6464
 8002e9a:	1d          	.byte	0x1d
 8002e9b:	00          	.byte	0x00
 8002e9c:	4808      	ldr	r0, [pc, #32]	; (8002ec0 <UART_SetConfig+0x270>)
 8002e9e:	e015      	b.n	8002ecc <UART_SetConfig+0x27c>
 8002ea0:	efff69f3 	.word	0xefff69f3
 8002ea4:	40008000 	.word	0x40008000
 8002ea8:	40013800 	.word	0x40013800
 8002eac:	40004400 	.word	0x40004400
 8002eb0:	40004800 	.word	0x40004800
 8002eb4:	40004c00 	.word	0x40004c00
 8002eb8:	40005000 	.word	0x40005000
 8002ebc:	000ffcff 	.word	0x000ffcff
 8002ec0:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ec4:	f7ff f8b0 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	d048      	beq.n	8002f5e <UART_SetConfig+0x30e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ecc:	6862      	ldr	r2, [r4, #4]
 8002ece:	0853      	lsrs	r3, r2, #1
 8002ed0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002ed4:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed8:	f1a0 0210 	sub.w	r2, r0, #16
 8002edc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d83e      	bhi.n	8002f62 <UART_SetConfig+0x312>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ee4:	b283      	uxth	r3, r0
 8002ee6:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eea:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8002eee:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	60d8      	str	r0, [r3, #12]
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	e019      	b.n	8002f2c <UART_SetConfig+0x2dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ef8:	f7ff f8a8 	bl	800204c <HAL_RCC_GetPCLK2Freq>
        break;
 8002efc:	e7e4      	b.n	8002ec8 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetSysClockFreq();
 8002efe:	f7fe fc61 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
        break;
 8002f02:	e7e1      	b.n	8002ec8 <UART_SetConfig+0x278>
    switch (clocksource)
 8002f04:	481b      	ldr	r0, [pc, #108]	; (8002f74 <UART_SetConfig+0x324>)
 8002f06:	e002      	b.n	8002f0e <UART_SetConfig+0x2be>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f08:	f7ff f88e 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f0c:	b368      	cbz	r0, 8002f6a <UART_SetConfig+0x31a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f0e:	6863      	ldr	r3, [r4, #4]
 8002f10:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002f14:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f18:	f1a0 0210 	sub.w	r2, r0, #16
 8002f1c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d824      	bhi.n	8002f6e <UART_SetConfig+0x31e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	b280      	uxth	r0, r0
 8002f28:	60d8      	str	r0, [r3, #12]
 8002f2a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002f30:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8002f32:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f34:	f7ff f88a 	bl	800204c <HAL_RCC_GetPCLK2Freq>
        break;
 8002f38:	e7e8      	b.n	8002f0c <UART_SetConfig+0x2bc>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f3a:	f7fe fc43 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
        break;
 8002f3e:	e7e5      	b.n	8002f0c <UART_SetConfig+0x2bc>
        pclk = (uint32_t) LSE_VALUE;
 8002f40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f44:	e7e3      	b.n	8002f0e <UART_SetConfig+0x2be>
    switch (clocksource)
 8002f46:	2001      	movs	r0, #1
 8002f48:	e7f0      	b.n	8002f2c <UART_SetConfig+0x2dc>
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	e7ee      	b.n	8002f2c <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8002f4e:	2001      	movs	r0, #1
 8002f50:	e7ec      	b.n	8002f2c <UART_SetConfig+0x2dc>
 8002f52:	2001      	movs	r0, #1
 8002f54:	e7ea      	b.n	8002f2c <UART_SetConfig+0x2dc>
          ret = HAL_ERROR;
 8002f56:	2001      	movs	r0, #1
 8002f58:	e7e8      	b.n	8002f2c <UART_SetConfig+0x2dc>
    switch (clocksource)
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	e7e6      	b.n	8002f2c <UART_SetConfig+0x2dc>
 8002f5e:	2000      	movs	r0, #0
 8002f60:	e7e4      	b.n	8002f2c <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8002f62:	2001      	movs	r0, #1
 8002f64:	e7e2      	b.n	8002f2c <UART_SetConfig+0x2dc>
    switch (clocksource)
 8002f66:	2001      	movs	r0, #1
 8002f68:	e7e0      	b.n	8002f2c <UART_SetConfig+0x2dc>
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	e7de      	b.n	8002f2c <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8002f6e:	2001      	movs	r0, #1
 8002f70:	e7dc      	b.n	8002f2c <UART_SetConfig+0x2dc>
 8002f72:	bf00      	nop
 8002f74:	00f42400 	.word	0x00f42400

08002f78 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f7a:	f013 0f01 	tst.w	r3, #1
 8002f7e:	d006      	beq.n	8002f8e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f80:	6802      	ldr	r2, [r0, #0]
 8002f82:	6853      	ldr	r3, [r2, #4]
 8002f84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f88:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f90:	f013 0f02 	tst.w	r3, #2
 8002f94:	d006      	beq.n	8002fa4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f96:	6802      	ldr	r2, [r0, #0]
 8002f98:	6853      	ldr	r3, [r2, #4]
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fa4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fa6:	f013 0f04 	tst.w	r3, #4
 8002faa:	d006      	beq.n	8002fba <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fac:	6802      	ldr	r2, [r0, #0]
 8002fae:	6853      	ldr	r3, [r2, #4]
 8002fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fbc:	f013 0f08 	tst.w	r3, #8
 8002fc0:	d006      	beq.n	8002fd0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fc2:	6802      	ldr	r2, [r0, #0]
 8002fc4:	6853      	ldr	r3, [r2, #4]
 8002fc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002fca:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fd2:	f013 0f10 	tst.w	r3, #16
 8002fd6:	d006      	beq.n	8002fe6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fd8:	6802      	ldr	r2, [r0, #0]
 8002fda:	6893      	ldr	r3, [r2, #8]
 8002fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fe0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fe6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fe8:	f013 0f20 	tst.w	r3, #32
 8002fec:	d006      	beq.n	8002ffc <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fee:	6802      	ldr	r2, [r0, #0]
 8002ff0:	6893      	ldr	r3, [r2, #8]
 8002ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ff6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ffc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ffe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003002:	d00a      	beq.n	800301a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003004:	6802      	ldr	r2, [r0, #0]
 8003006:	6853      	ldr	r3, [r2, #4]
 8003008:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800300c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800300e:	430b      	orrs	r3, r1
 8003010:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003012:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003018:	d00b      	beq.n	8003032 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800301a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800301c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003020:	d006      	beq.n	8003030 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003022:	6802      	ldr	r2, [r0, #0]
 8003024:	6853      	ldr	r3, [r2, #4]
 8003026:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800302a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800302c:	430b      	orrs	r3, r1
 800302e:	6053      	str	r3, [r2, #4]
}
 8003030:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003032:	6802      	ldr	r2, [r0, #0]
 8003034:	6853      	ldr	r3, [r2, #4]
 8003036:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800303a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800303c:	430b      	orrs	r3, r1
 800303e:	6053      	str	r3, [r2, #4]
 8003040:	e7eb      	b.n	800301a <UART_AdvFeatureConfig+0xa2>

08003042 <UART_WaitOnFlagUntilTimeout>:
{
 8003042:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003046:	4605      	mov	r5, r0
 8003048:	460f      	mov	r7, r1
 800304a:	4616      	mov	r6, r2
 800304c:	4699      	mov	r9, r3
 800304e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003052:	682c      	ldr	r4, [r5, #0]
 8003054:	69e4      	ldr	r4, [r4, #28]
 8003056:	ea37 0304 	bics.w	r3, r7, r4
 800305a:	bf0c      	ite	eq
 800305c:	f04f 0c01 	moveq.w	ip, #1
 8003060:	f04f 0c00 	movne.w	ip, #0
 8003064:	45b4      	cmp	ip, r6
 8003066:	d153      	bne.n	8003110 <UART_WaitOnFlagUntilTimeout+0xce>
    if (Timeout != HAL_MAX_DELAY)
 8003068:	f1b8 3fff 	cmp.w	r8, #4294967295
 800306c:	d0f1      	beq.n	8003052 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fd fd9d 	bl	8000bac <HAL_GetTick>
 8003072:	eba0 0009 	sub.w	r0, r0, r9
 8003076:	4540      	cmp	r0, r8
 8003078:	d82d      	bhi.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x94>
 800307a:	f1b8 0f00 	cmp.w	r8, #0
 800307e:	d02a      	beq.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	f012 0f04 	tst.w	r2, #4
 8003088:	d0e3      	beq.n	8003052 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003090:	d0df      	beq.n	8003052 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003096:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003098:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309a:	e852 3f00 	ldrex	r3, [r2]
 800309e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a2:	e842 3100 	strex	r1, r3, [r2]
 80030a6:	2900      	cmp	r1, #0
 80030a8:	d1f6      	bne.n	8003098 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030aa:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ac:	f102 0308 	add.w	r3, r2, #8
 80030b0:	e853 3f00 	ldrex	r3, [r3]
 80030b4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	3208      	adds	r2, #8
 80030ba:	e842 3100 	strex	r1, r3, [r2]
 80030be:	2900      	cmp	r1, #0
 80030c0:	d1f3      	bne.n	80030aa <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 80030c2:	2320      	movs	r3, #32
 80030c4:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030c6:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030c8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          __HAL_UNLOCK(huart);
 80030cc:	2300      	movs	r3, #0
 80030ce:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
          return HAL_TIMEOUT;
 80030d2:	2003      	movs	r0, #3
 80030d4:	e01d      	b.n	8003112 <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030d6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	e852 3f00 	ldrex	r3, [r2]
 80030dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e0:	e842 3100 	strex	r1, r3, [r2]
 80030e4:	2900      	cmp	r1, #0
 80030e6:	d1f6      	bne.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	f102 0308 	add.w	r3, r2, #8
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	3208      	adds	r2, #8
 80030f8:	e842 3100 	strex	r1, r3, [r2]
 80030fc:	2900      	cmp	r1, #0
 80030fe:	d1f3      	bne.n	80030e8 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8003100:	2320      	movs	r3, #32
 8003102:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003104:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8003106:	2300      	movs	r3, #0
 8003108:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 800310c:	2003      	movs	r0, #3
 800310e:	e000      	b.n	8003112 <UART_WaitOnFlagUntilTimeout+0xd0>
  return HAL_OK;
 8003110:	2000      	movs	r0, #0
}
 8003112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003116 <HAL_UART_Transmit>:
{
 8003116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800311e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003120:	2b20      	cmp	r3, #32
 8003122:	d156      	bne.n	80031d2 <HAL_UART_Transmit+0xbc>
 8003124:	4604      	mov	r4, r0
 8003126:	460d      	mov	r5, r1
 8003128:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800312a:	2900      	cmp	r1, #0
 800312c:	d055      	beq.n	80031da <HAL_UART_Transmit+0xc4>
 800312e:	2a00      	cmp	r2, #0
 8003130:	d055      	beq.n	80031de <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8003132:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8003136:	2b01      	cmp	r3, #1
 8003138:	d053      	beq.n	80031e2 <HAL_UART_Transmit+0xcc>
 800313a:	2301      	movs	r3, #1
 800313c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003140:	2300      	movs	r3, #0
 8003142:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003146:	2321      	movs	r3, #33	; 0x21
 8003148:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800314a:	f7fd fd2f 	bl	8000bac <HAL_GetTick>
 800314e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8003150:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8003154:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003158:	68a3      	ldr	r3, [r4, #8]
 800315a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315e:	d005      	beq.n	800316c <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8003160:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8003164:	2300      	movs	r3, #0
 8003166:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800316a:	e014      	b.n	8003196 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316c:	6923      	ldr	r3, [r4, #16]
 800316e:	b113      	cbz	r3, 8003176 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8003170:	f04f 0800 	mov.w	r8, #0
 8003174:	e7f6      	b.n	8003164 <HAL_UART_Transmit+0x4e>
      pdata16bits = (const uint16_t *) pData;
 8003176:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003178:	2500      	movs	r5, #0
 800317a:	e7f3      	b.n	8003164 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800317c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003186:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003188:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800318c:	b292      	uxth	r2, r2
 800318e:	3a01      	subs	r2, #1
 8003190:	b292      	uxth	r2, r2
 8003192:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003196:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800319a:	b29b      	uxth	r3, r3
 800319c:	b173      	cbz	r3, 80031bc <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800319e:	9600      	str	r6, [sp, #0]
 80031a0:	463b      	mov	r3, r7
 80031a2:	2200      	movs	r2, #0
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	4620      	mov	r0, r4
 80031a8:	f7ff ff4b 	bl	8003042 <UART_WaitOnFlagUntilTimeout>
 80031ac:	b9d8      	cbnz	r0, 80031e6 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80031ae:	2d00      	cmp	r5, #0
 80031b0:	d0e4      	beq.n	800317c <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031ba:	e7e5      	b.n	8003188 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031bc:	9600      	str	r6, [sp, #0]
 80031be:	463b      	mov	r3, r7
 80031c0:	2200      	movs	r2, #0
 80031c2:	2140      	movs	r1, #64	; 0x40
 80031c4:	4620      	mov	r0, r4
 80031c6:	f7ff ff3c 	bl	8003042 <UART_WaitOnFlagUntilTimeout>
 80031ca:	b970      	cbnz	r0, 80031ea <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80031cc:	2320      	movs	r3, #32
 80031ce:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80031d0:	e000      	b.n	80031d4 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80031d2:	2002      	movs	r0, #2
}
 80031d4:	b002      	add	sp, #8
 80031d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80031da:	2001      	movs	r0, #1
 80031dc:	e7fa      	b.n	80031d4 <HAL_UART_Transmit+0xbe>
 80031de:	2001      	movs	r0, #1
 80031e0:	e7f8      	b.n	80031d4 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80031e2:	2002      	movs	r0, #2
 80031e4:	e7f6      	b.n	80031d4 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80031e6:	2003      	movs	r0, #3
 80031e8:	e7f4      	b.n	80031d4 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80031ea:	2003      	movs	r0, #3
 80031ec:	e7f2      	b.n	80031d4 <HAL_UART_Transmit+0xbe>

080031ee <UART_CheckIdleState>:
{
 80031ee:	b530      	push	{r4, r5, lr}
 80031f0:	b083      	sub	sp, #12
 80031f2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80031fa:	f7fd fcd7 	bl	8000bac <HAL_GetTick>
 80031fe:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003200:	6822      	ldr	r2, [r4, #0]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	f012 0f08 	tst.w	r2, #8
 8003208:	d10d      	bne.n	8003226 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f013 0f04 	tst.w	r3, #4
 8003212:	d116      	bne.n	8003242 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8003214:	2320      	movs	r3, #32
 8003216:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003218:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321a:	2000      	movs	r0, #0
 800321c:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 800321e:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 8003222:	b003      	add	sp, #12
 8003224:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003226:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	4603      	mov	r3, r0
 800322e:	2200      	movs	r2, #0
 8003230:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff ff04 	bl	8003042 <UART_WaitOnFlagUntilTimeout>
 800323a:	2800      	cmp	r0, #0
 800323c:	d0e5      	beq.n	800320a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800323e:	2003      	movs	r0, #3
 8003240:	e7ef      	b.n	8003222 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003242:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	462b      	mov	r3, r5
 800324a:	2200      	movs	r2, #0
 800324c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003250:	4620      	mov	r0, r4
 8003252:	f7ff fef6 	bl	8003042 <UART_WaitOnFlagUntilTimeout>
 8003256:	2800      	cmp	r0, #0
 8003258:	d0dc      	beq.n	8003214 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800325a:	2003      	movs	r0, #3
 800325c:	e7e1      	b.n	8003222 <UART_CheckIdleState+0x34>

0800325e <HAL_UART_Init>:
  if (huart == NULL)
 800325e:	b368      	cbz	r0, 80032bc <HAL_UART_Init+0x5e>
{
 8003260:	b510      	push	{r4, lr}
 8003262:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003264:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003266:	b303      	cbz	r3, 80032aa <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003268:	2324      	movs	r3, #36	; 0x24
 800326a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800326c:	6822      	ldr	r2, [r4, #0]
 800326e:	6813      	ldr	r3, [r2, #0]
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003276:	4620      	mov	r0, r4
 8003278:	f7ff fcea 	bl	8002c50 <UART_SetConfig>
 800327c:	2801      	cmp	r0, #1
 800327e:	d013      	beq.n	80032a8 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003282:	b9bb      	cbnz	r3, 80032b4 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003284:	6822      	ldr	r2, [r4, #0]
 8003286:	6853      	ldr	r3, [r2, #4]
 8003288:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800328c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328e:	6822      	ldr	r2, [r4, #0]
 8003290:	6893      	ldr	r3, [r2, #8]
 8003292:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003296:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003298:	6822      	ldr	r2, [r4, #0]
 800329a:	6813      	ldr	r3, [r2, #0]
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80032a2:	4620      	mov	r0, r4
 80032a4:	f7ff ffa3 	bl	80031ee <UART_CheckIdleState>
}
 80032a8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80032aa:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80032ae:	f7fd fba3 	bl	80009f8 <HAL_UART_MspInit>
 80032b2:	e7d9      	b.n	8003268 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80032b4:	4620      	mov	r0, r4
 80032b6:	f7ff fe5f 	bl	8002f78 <UART_AdvFeatureConfig>
 80032ba:	e7e3      	b.n	8003284 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80032bc:	2001      	movs	r0, #1
}
 80032be:	4770      	bx	lr

080032c0 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr  = pData;
 80032c0:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 80032c2:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 80032c6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	6643      	str	r3, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80032ce:	6883      	ldr	r3, [r0, #8]
 80032d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d4:	d006      	beq.n	80032e4 <UART_Start_Receive_IT+0x24>
 80032d6:	b9a3      	cbnz	r3, 8003302 <UART_Start_Receive_IT+0x42>
 80032d8:	6903      	ldr	r3, [r0, #16]
 80032da:	b973      	cbnz	r3, 80032fa <UART_Start_Receive_IT+0x3a>
 80032dc:	23ff      	movs	r3, #255	; 0xff
 80032de:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80032e2:	e014      	b.n	800330e <UART_Start_Receive_IT+0x4e>
 80032e4:	6903      	ldr	r3, [r0, #16]
 80032e6:	b923      	cbnz	r3, 80032f2 <UART_Start_Receive_IT+0x32>
 80032e8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80032ec:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80032f0:	e00d      	b.n	800330e <UART_Start_Receive_IT+0x4e>
 80032f2:	23ff      	movs	r3, #255	; 0xff
 80032f4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80032f8:	e009      	b.n	800330e <UART_Start_Receive_IT+0x4e>
 80032fa:	237f      	movs	r3, #127	; 0x7f
 80032fc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003300:	e005      	b.n	800330e <UART_Start_Receive_IT+0x4e>
 8003302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003306:	d029      	beq.n	800335c <UART_Start_Receive_IT+0x9c>
 8003308:	2300      	movs	r3, #0
 800330a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330e:	2300      	movs	r3, #0
 8003310:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003314:	2322      	movs	r3, #34	; 0x22
 8003316:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003318:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	f102 0308 	add.w	r3, r2, #8
 800331e:	e853 3f00 	ldrex	r3, [r3]
 8003322:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	3208      	adds	r2, #8
 8003328:	e842 3100 	strex	r1, r3, [r2]
 800332c:	2900      	cmp	r1, #0
 800332e:	d1f3      	bne.n	8003318 <UART_Start_Receive_IT+0x58>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003330:	6883      	ldr	r3, [r0, #8]
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003336:	d01b      	beq.n	8003370 <UART_Start_Receive_IT+0xb0>
    huart->RxISR = UART_RxISR_8BIT;
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <UART_Start_Receive_IT+0xd0>)
 800333a:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800333c:	2300      	movs	r3, #0
 800333e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003342:	6903      	ldr	r3, [r0, #16]
 8003344:	b1d3      	cbz	r3, 800337c <UART_Start_Receive_IT+0xbc>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003346:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003348:	e852 3f00 	ldrex	r3, [r2]
 800334c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	e842 3100 	strex	r1, r3, [r2]
 8003354:	2900      	cmp	r1, #0
 8003356:	d1f6      	bne.n	8003346 <UART_Start_Receive_IT+0x86>
}
 8003358:	2000      	movs	r0, #0
 800335a:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800335c:	6903      	ldr	r3, [r0, #16]
 800335e:	b91b      	cbnz	r3, 8003368 <UART_Start_Receive_IT+0xa8>
 8003360:	237f      	movs	r3, #127	; 0x7f
 8003362:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003366:	e7d2      	b.n	800330e <UART_Start_Receive_IT+0x4e>
 8003368:	233f      	movs	r3, #63	; 0x3f
 800336a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800336e:	e7ce      	b.n	800330e <UART_Start_Receive_IT+0x4e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003370:	6903      	ldr	r3, [r0, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e0      	bne.n	8003338 <UART_Start_Receive_IT+0x78>
    huart->RxISR = UART_RxISR_16BIT;
 8003376:	4b07      	ldr	r3, [pc, #28]	; (8003394 <UART_Start_Receive_IT+0xd4>)
 8003378:	6643      	str	r3, [r0, #100]	; 0x64
 800337a:	e7df      	b.n	800333c <UART_Start_Receive_IT+0x7c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800337c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	e852 3f00 	ldrex	r3, [r2]
 8003382:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003386:	e842 3100 	strex	r1, r3, [r2]
 800338a:	2900      	cmp	r1, #0
 800338c:	d1f6      	bne.n	800337c <UART_Start_Receive_IT+0xbc>
 800338e:	e7e3      	b.n	8003358 <UART_Start_Receive_IT+0x98>
 8003390:	08002af1 	.word	0x08002af1
 8003394:	08002ba1 	.word	0x08002ba1

08003398 <HAL_UART_Receive_IT>:
{
 8003398:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800339a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800339c:	2b20      	cmp	r3, #32
 800339e:	d11e      	bne.n	80033de <HAL_UART_Receive_IT+0x46>
    if ((pData == NULL) || (Size == 0U))
 80033a0:	b1f9      	cbz	r1, 80033e2 <HAL_UART_Receive_IT+0x4a>
 80033a2:	b302      	cbz	r2, 80033e6 <HAL_UART_Receive_IT+0x4e>
    __HAL_LOCK(huart);
 80033a4:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d01e      	beq.n	80033ea <HAL_UART_Receive_IT+0x52>
 80033ac:	2301      	movs	r3, #1
 80033ae:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b2:	2300      	movs	r3, #0
 80033b4:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80033b6:	6803      	ldr	r3, [r0, #0]
 80033b8:	4c0d      	ldr	r4, [pc, #52]	; (80033f0 <HAL_UART_Receive_IT+0x58>)
 80033ba:	42a3      	cmp	r3, r4
 80033bc:	d00c      	beq.n	80033d8 <HAL_UART_Receive_IT+0x40>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80033c4:	d008      	beq.n	80033d8 <HAL_UART_Receive_IT+0x40>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033c6:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	e854 3f00 	ldrex	r3, [r4]
 80033cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	e844 3500 	strex	r5, r3, [r4]
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	d1f6      	bne.n	80033c6 <HAL_UART_Receive_IT+0x2e>
    return (UART_Start_Receive_IT(huart, pData, Size));
 80033d8:	f7ff ff72 	bl	80032c0 <UART_Start_Receive_IT>
 80033dc:	e000      	b.n	80033e0 <HAL_UART_Receive_IT+0x48>
    return HAL_BUSY;
 80033de:	2002      	movs	r0, #2
}
 80033e0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80033e2:	2001      	movs	r0, #1
 80033e4:	e7fc      	b.n	80033e0 <HAL_UART_Receive_IT+0x48>
 80033e6:	2001      	movs	r0, #1
 80033e8:	e7fa      	b.n	80033e0 <HAL_UART_Receive_IT+0x48>
    __HAL_LOCK(huart);
 80033ea:	2002      	movs	r0, #2
 80033ec:	e7f8      	b.n	80033e0 <HAL_UART_Receive_IT+0x48>
 80033ee:	bf00      	nop
 80033f0:	40008000 	.word	0x40008000

080033f4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80033f4:	4770      	bx	lr
	...

080033f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80033f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003430 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033fc:	f7fd fb8a 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003400:	480c      	ldr	r0, [pc, #48]	; (8003434 <LoopForever+0x6>)
  ldr r1, =_edata
 8003402:	490d      	ldr	r1, [pc, #52]	; (8003438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003404:	4a0d      	ldr	r2, [pc, #52]	; (800343c <LoopForever+0xe>)
  movs r3, #0
 8003406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003408:	e002      	b.n	8003410 <LoopCopyDataInit>

0800340a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800340a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800340c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800340e:	3304      	adds	r3, #4

08003410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003414:	d3f9      	bcc.n	800340a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003416:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003418:	4c0a      	ldr	r4, [pc, #40]	; (8003444 <LoopForever+0x16>)
  movs r3, #0
 800341a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800341c:	e001      	b.n	8003422 <LoopFillZerobss>

0800341e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800341e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003420:	3204      	adds	r2, #4

08003422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003424:	d3fb      	bcc.n	800341e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003426:	f000 f817 	bl	8003458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800342a:	f7fd fa6b 	bl	8000904 <main>

0800342e <LoopForever>:

LoopForever:
    b LoopForever
 800342e:	e7fe      	b.n	800342e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003430:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003438:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800343c:	080036a0 	.word	0x080036a0
  ldr r2, =_sbss
 8003440:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003444:	2000019c 	.word	0x2000019c

08003448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003448:	e7fe      	b.n	8003448 <ADC1_2_IRQHandler>
	...

0800344c <__errno>:
 800344c:	4b01      	ldr	r3, [pc, #4]	; (8003454 <__errno+0x8>)
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	2000000c 	.word	0x2000000c

08003458 <__libc_init_array>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	4d0d      	ldr	r5, [pc, #52]	; (8003490 <__libc_init_array+0x38>)
 800345c:	4c0d      	ldr	r4, [pc, #52]	; (8003494 <__libc_init_array+0x3c>)
 800345e:	1b64      	subs	r4, r4, r5
 8003460:	10a4      	asrs	r4, r4, #2
 8003462:	2600      	movs	r6, #0
 8003464:	42a6      	cmp	r6, r4
 8003466:	d109      	bne.n	800347c <__libc_init_array+0x24>
 8003468:	4d0b      	ldr	r5, [pc, #44]	; (8003498 <__libc_init_array+0x40>)
 800346a:	4c0c      	ldr	r4, [pc, #48]	; (800349c <__libc_init_array+0x44>)
 800346c:	f000 f8da 	bl	8003624 <_init>
 8003470:	1b64      	subs	r4, r4, r5
 8003472:	10a4      	asrs	r4, r4, #2
 8003474:	2600      	movs	r6, #0
 8003476:	42a6      	cmp	r6, r4
 8003478:	d105      	bne.n	8003486 <__libc_init_array+0x2e>
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003480:	4798      	blx	r3
 8003482:	3601      	adds	r6, #1
 8003484:	e7ee      	b.n	8003464 <__libc_init_array+0xc>
 8003486:	f855 3b04 	ldr.w	r3, [r5], #4
 800348a:	4798      	blx	r3
 800348c:	3601      	adds	r6, #1
 800348e:	e7f2      	b.n	8003476 <__libc_init_array+0x1e>
 8003490:	08003690 	.word	0x08003690
 8003494:	08003690 	.word	0x08003690
 8003498:	08003690 	.word	0x08003690
 800349c:	08003694 	.word	0x08003694

080034a0 <malloc>:
 80034a0:	4b02      	ldr	r3, [pc, #8]	; (80034ac <malloc+0xc>)
 80034a2:	4601      	mov	r1, r0
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	f000 b82b 	b.w	8003500 <_malloc_r>
 80034aa:	bf00      	nop
 80034ac:	2000000c 	.word	0x2000000c

080034b0 <memset>:
 80034b0:	4402      	add	r2, r0
 80034b2:	4603      	mov	r3, r0
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d100      	bne.n	80034ba <memset+0xa>
 80034b8:	4770      	bx	lr
 80034ba:	f803 1b01 	strb.w	r1, [r3], #1
 80034be:	e7f9      	b.n	80034b4 <memset+0x4>

080034c0 <sbrk_aligned>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	4e0e      	ldr	r6, [pc, #56]	; (80034fc <sbrk_aligned+0x3c>)
 80034c4:	460c      	mov	r4, r1
 80034c6:	6831      	ldr	r1, [r6, #0]
 80034c8:	4605      	mov	r5, r0
 80034ca:	b911      	cbnz	r1, 80034d2 <sbrk_aligned+0x12>
 80034cc:	f000 f88c 	bl	80035e8 <_sbrk_r>
 80034d0:	6030      	str	r0, [r6, #0]
 80034d2:	4621      	mov	r1, r4
 80034d4:	4628      	mov	r0, r5
 80034d6:	f000 f887 	bl	80035e8 <_sbrk_r>
 80034da:	1c43      	adds	r3, r0, #1
 80034dc:	d00a      	beq.n	80034f4 <sbrk_aligned+0x34>
 80034de:	1cc4      	adds	r4, r0, #3
 80034e0:	f024 0403 	bic.w	r4, r4, #3
 80034e4:	42a0      	cmp	r0, r4
 80034e6:	d007      	beq.n	80034f8 <sbrk_aligned+0x38>
 80034e8:	1a21      	subs	r1, r4, r0
 80034ea:	4628      	mov	r0, r5
 80034ec:	f000 f87c 	bl	80035e8 <_sbrk_r>
 80034f0:	3001      	adds	r0, #1
 80034f2:	d101      	bne.n	80034f8 <sbrk_aligned+0x38>
 80034f4:	f04f 34ff 	mov.w	r4, #4294967295
 80034f8:	4620      	mov	r0, r4
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	20000190 	.word	0x20000190

08003500 <_malloc_r>:
 8003500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003504:	1ccd      	adds	r5, r1, #3
 8003506:	f025 0503 	bic.w	r5, r5, #3
 800350a:	3508      	adds	r5, #8
 800350c:	2d0c      	cmp	r5, #12
 800350e:	bf38      	it	cc
 8003510:	250c      	movcc	r5, #12
 8003512:	2d00      	cmp	r5, #0
 8003514:	4607      	mov	r7, r0
 8003516:	db01      	blt.n	800351c <_malloc_r+0x1c>
 8003518:	42a9      	cmp	r1, r5
 800351a:	d905      	bls.n	8003528 <_malloc_r+0x28>
 800351c:	230c      	movs	r3, #12
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	2600      	movs	r6, #0
 8003522:	4630      	mov	r0, r6
 8003524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003528:	4e2e      	ldr	r6, [pc, #184]	; (80035e4 <_malloc_r+0xe4>)
 800352a:	f000 f86d 	bl	8003608 <__malloc_lock>
 800352e:	6833      	ldr	r3, [r6, #0]
 8003530:	461c      	mov	r4, r3
 8003532:	bb34      	cbnz	r4, 8003582 <_malloc_r+0x82>
 8003534:	4629      	mov	r1, r5
 8003536:	4638      	mov	r0, r7
 8003538:	f7ff ffc2 	bl	80034c0 <sbrk_aligned>
 800353c:	1c43      	adds	r3, r0, #1
 800353e:	4604      	mov	r4, r0
 8003540:	d14d      	bne.n	80035de <_malloc_r+0xde>
 8003542:	6834      	ldr	r4, [r6, #0]
 8003544:	4626      	mov	r6, r4
 8003546:	2e00      	cmp	r6, #0
 8003548:	d140      	bne.n	80035cc <_malloc_r+0xcc>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	4631      	mov	r1, r6
 800354e:	4638      	mov	r0, r7
 8003550:	eb04 0803 	add.w	r8, r4, r3
 8003554:	f000 f848 	bl	80035e8 <_sbrk_r>
 8003558:	4580      	cmp	r8, r0
 800355a:	d13a      	bne.n	80035d2 <_malloc_r+0xd2>
 800355c:	6821      	ldr	r1, [r4, #0]
 800355e:	3503      	adds	r5, #3
 8003560:	1a6d      	subs	r5, r5, r1
 8003562:	f025 0503 	bic.w	r5, r5, #3
 8003566:	3508      	adds	r5, #8
 8003568:	2d0c      	cmp	r5, #12
 800356a:	bf38      	it	cc
 800356c:	250c      	movcc	r5, #12
 800356e:	4629      	mov	r1, r5
 8003570:	4638      	mov	r0, r7
 8003572:	f7ff ffa5 	bl	80034c0 <sbrk_aligned>
 8003576:	3001      	adds	r0, #1
 8003578:	d02b      	beq.n	80035d2 <_malloc_r+0xd2>
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	442b      	add	r3, r5
 800357e:	6023      	str	r3, [r4, #0]
 8003580:	e00e      	b.n	80035a0 <_malloc_r+0xa0>
 8003582:	6822      	ldr	r2, [r4, #0]
 8003584:	1b52      	subs	r2, r2, r5
 8003586:	d41e      	bmi.n	80035c6 <_malloc_r+0xc6>
 8003588:	2a0b      	cmp	r2, #11
 800358a:	d916      	bls.n	80035ba <_malloc_r+0xba>
 800358c:	1961      	adds	r1, r4, r5
 800358e:	42a3      	cmp	r3, r4
 8003590:	6025      	str	r5, [r4, #0]
 8003592:	bf18      	it	ne
 8003594:	6059      	strne	r1, [r3, #4]
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	bf08      	it	eq
 800359a:	6031      	streq	r1, [r6, #0]
 800359c:	5162      	str	r2, [r4, r5]
 800359e:	604b      	str	r3, [r1, #4]
 80035a0:	4638      	mov	r0, r7
 80035a2:	f104 060b 	add.w	r6, r4, #11
 80035a6:	f000 f835 	bl	8003614 <__malloc_unlock>
 80035aa:	f026 0607 	bic.w	r6, r6, #7
 80035ae:	1d23      	adds	r3, r4, #4
 80035b0:	1af2      	subs	r2, r6, r3
 80035b2:	d0b6      	beq.n	8003522 <_malloc_r+0x22>
 80035b4:	1b9b      	subs	r3, r3, r6
 80035b6:	50a3      	str	r3, [r4, r2]
 80035b8:	e7b3      	b.n	8003522 <_malloc_r+0x22>
 80035ba:	6862      	ldr	r2, [r4, #4]
 80035bc:	42a3      	cmp	r3, r4
 80035be:	bf0c      	ite	eq
 80035c0:	6032      	streq	r2, [r6, #0]
 80035c2:	605a      	strne	r2, [r3, #4]
 80035c4:	e7ec      	b.n	80035a0 <_malloc_r+0xa0>
 80035c6:	4623      	mov	r3, r4
 80035c8:	6864      	ldr	r4, [r4, #4]
 80035ca:	e7b2      	b.n	8003532 <_malloc_r+0x32>
 80035cc:	4634      	mov	r4, r6
 80035ce:	6876      	ldr	r6, [r6, #4]
 80035d0:	e7b9      	b.n	8003546 <_malloc_r+0x46>
 80035d2:	230c      	movs	r3, #12
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	4638      	mov	r0, r7
 80035d8:	f000 f81c 	bl	8003614 <__malloc_unlock>
 80035dc:	e7a1      	b.n	8003522 <_malloc_r+0x22>
 80035de:	6025      	str	r5, [r4, #0]
 80035e0:	e7de      	b.n	80035a0 <_malloc_r+0xa0>
 80035e2:	bf00      	nop
 80035e4:	2000018c 	.word	0x2000018c

080035e8 <_sbrk_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4d06      	ldr	r5, [pc, #24]	; (8003604 <_sbrk_r+0x1c>)
 80035ec:	2300      	movs	r3, #0
 80035ee:	4604      	mov	r4, r0
 80035f0:	4608      	mov	r0, r1
 80035f2:	602b      	str	r3, [r5, #0]
 80035f4:	f7fd fa70 	bl	8000ad8 <_sbrk>
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	d102      	bne.n	8003602 <_sbrk_r+0x1a>
 80035fc:	682b      	ldr	r3, [r5, #0]
 80035fe:	b103      	cbz	r3, 8003602 <_sbrk_r+0x1a>
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	bd38      	pop	{r3, r4, r5, pc}
 8003604:	20000194 	.word	0x20000194

08003608 <__malloc_lock>:
 8003608:	4801      	ldr	r0, [pc, #4]	; (8003610 <__malloc_lock+0x8>)
 800360a:	f000 b809 	b.w	8003620 <__retarget_lock_acquire_recursive>
 800360e:	bf00      	nop
 8003610:	20000198 	.word	0x20000198

08003614 <__malloc_unlock>:
 8003614:	4801      	ldr	r0, [pc, #4]	; (800361c <__malloc_unlock+0x8>)
 8003616:	f000 b804 	b.w	8003622 <__retarget_lock_release_recursive>
 800361a:	bf00      	nop
 800361c:	20000198 	.word	0x20000198

08003620 <__retarget_lock_acquire_recursive>:
 8003620:	4770      	bx	lr

08003622 <__retarget_lock_release_recursive>:
 8003622:	4770      	bx	lr

08003624 <_init>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	bf00      	nop
 8003628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362a:	bc08      	pop	{r3}
 800362c:	469e      	mov	lr, r3
 800362e:	4770      	bx	lr

08003630 <_fini>:
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	bf00      	nop
 8003634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003636:	bc08      	pop	{r3}
 8003638:	469e      	mov	lr, r3
 800363a:	4770      	bx	lr
 800363c:	0000      	movs	r0, r0
	...
